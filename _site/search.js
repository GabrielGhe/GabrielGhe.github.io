/** @jsx React.DOM */

var random_posts = [];
var data = {
  
    "/swift/2015/03/25/swift-multithreading": {  "id": "/swift/2015/03/25/swift-multithreading", "title": "Swift: Multithreading", "category": "swift", "tags": "ios thread parallel background concurrency", "content" :"OverviewMultithreading is a big part of Programming and you should know it well. You can find more information about multithreading here.ContentMultithreading in iOS is done with “queues”. Functions and closures are placed in a queue and then pulled off the queue to execute on an associated thread.There is a special queue called the main queue. All UI interections MUST happen on this queue only. You should put all non-UI activity that is time consuming a queue other than the main queue so that you have a responsive UI.There are 2 ways to do multithreading.1 let queue = NSOperationQueue()2 queue.addOperationWithBlock {3     // do something in the background4 5     let mainQ: NSOperationQueue = NSOperationQueue.mainQueue()6     mainQ.addOperationWithBlock {7         // when done, update your UI and/or model on the main queue8     }9 }1 let queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0)2 dispatch_async(queue) {3     // do something in the background4 5     let mainQ: dispatch_queue_t = dispatch_get_main_queue()6     dispatch_async(mainQ) {7         // when done, update your UI and/or model on the main queue8     }9 }When using the second option, you can use different priorities.  QOS_CLASS_USER_INTERACTIVE: quick and high priority  QOS_CLASS_USER_INITIATED: high priority, might take time  QOS_CLASS_UTILITY: long running  QOS_CLASS_BACKGROUND: user not concerned with this1 let qos = Int(QOS_CLASS_USER_INTERACTIVE.value)2 let queue = dispatch_get_global_queue(qos, 0)You can also do a setTimeout from javascript. I really recommend creating a helped method for this one because it looks horrible.1 let delayInSeconds = 25.02 let delay = Int64(delayInSeconds * Double(NSEC_PER_MSEC))3 let dispatchTime = dispatch_time(DISPATCH_TIME_NOW, delay)4 dispatch_after(dispatchTime, dispatch_get_main_queue()) {5     // do something on the main queue 25 seconds from now6 }", "date" : "March 25, 2015" },
  
    "/swift/2015/03/25/swift-closures": {  "id": "/swift/2015/03/25/swift-closures", "title": "Swift: Closures", "category": "swift", "tags": "ios closure anonymous", "content" :"OverviewClosures are awesome. You can do some powerful things with them, but they are dangerous sometimes. You can find more information about closures here.ContentHere’s an example where the closure will create a memory leak. 1 class Person { 2     var batmanSong = {} // () -&gt; () 3     var sing(value: String) { 4         println(value) 5     } 6     func learnSomething() { 7         var na = &quot;Na&quot; 8         var batman = &quot; Batman&quot; 9         batmanSong = {10             na += &quot;Na&quot;11             self.sing(na + batman)12         }13     }14     func singBatmanSong8Times() {15         for i in 1...8 {16             sing()17         }18     }19 }The problem is that self has a reference to batmanSong and batmanSong has a reference to self. To fix this problem, you just say that batmanSong shouldn’t keep a reference to self.1 batmanSong = { [unowned self] in2     na += &quot;Na&quot;3     self.sing(na + batman)4 }", "date" : "March 25, 2015" },
  
    "/swift/2015/03/24/swift-viewcontroller-lifecycle": {  "id": "/swift/2015/03/24/swift-viewcontroller-lifecycle", "title": "Swift: ViewController Lifecycle", "category": "swift", "tags": "ios viewcontroller", "content" :"OverviewThe lifecycle for a ViewController is as follows.Content  Instantiated (from storyboard or code)  awakeFromNib  segue preparation happens  outlets get set  viewDidLoad  viewWillAppear/viewDidAppaer and viewWillDisappear/viewDidDisappear  viewWillLayoutSubviewsLifecycle Methods1 override func viewDidLoad() {2     // call super&#39;s version at beginning or end3     super.viewDidLoad()4     // do more setup5     // update your ui6     // geometry is not set yet (bounds)7 }1 func viewWillAppear(animated: Bool) {2     // every time the view gets displayed3     // geometry is set (bounds)4 }5 func viewDidAppear(animated: Bool)1 override func viewWillDisappear(animated: Bool) {2     super.viewWillDisappear(animated)3     // clean up stuff4     // get rid of image5 }6 func viewDidDisappear(animated: Bool)1 // your geometry has changed (rotate)2 func viewWillLayoutSubviews()3 func viewDidLayoutSubviews()", "date" : "March 24, 2015" },
  
    "/swift/2015/03/22/swift-uiview-bounds-vs-frame-vs-center": {  "id": "/swift/2015/03/22/swift-uiview-bounds-vs-frame-vs-center", "title": "Swift: UIView Bounds vs Frame vs Center", "category": "swift", "tags": "ios bounds center frame ui", "content" :"OverviewWhen developing for iOS, a lot of people confuse a UIView’s bounds, frame and center. This post will illustrate their difference. The images are taken from Stanford’s cs193p class.bounds: The UIView’s size and location relative to itself.frame: The UIView’s size and location relative to its superview.center: The UIView’s center relative to its superview. To get center of your own view, you do convertPoint(center, fromView: superview)", "date" : "March 22, 2015" },
  
    "/swift/2015/03/22/swift-making-a-protocol": {  "id": "/swift/2015/03/22/swift-making-a-protocol", "title": "Swift: Making a Protocol", "category": "swift", "tags": "ios delegate protocol", "content" :"OverviewIn the MVC design pattern, the model does not have access to the controller. But it has to let the controller know somehow that its data has changed. To do that it uses a protocol. A protocol is basically an interface in Java. Here’s how you would use it in swift.ContentProtocol1 // can only be implemented by a class2 protocol FaceViewDataSource: class {3     func smilinessForFaceView(sender: FaceView) -&gt; Double4 }View 1 class FaceView: UIView { 2     ... 3  4     // has to be weak... if this points to the controller 5     // and the controller points to this model, they&#39;re keeping each 6     // other in memory. 7     weak var dataSource: FaceViewDataSource? 8     override func drawRect(rect: CGRect){ 9         let smiliness = dataSource?.smilinessForFaceView(self) ?? 0.010     }11     ...12 }Controller/Model 1 class HappinessController: UIViewController, FaceViewDataSource { 2     // outlet to the UIView inside the controller 3     @IBOutlet weak var faceView: FaceView! { 4         didSet { 5             faceView.dataSource = self 6         } 7     } 8  9     var happiness: Int = 75 { // Model10         didSet {11             // 0 &lt;= happiness &lt;= 10012             happiness = min(max(happiness, 0), 100)13             // says that the view needs to be redrawn14             faceView.setNeedsDisplay()15         }16     }17     func smilinessForFaceView(sender: FaceView) -&gt; Double? {18         return Double(75)19     }20 }", "date" : "March 22, 2015" },
  
    "/swift/2015/03/22/swift-gestures": {  "id": "/swift/2015/03/22/swift-gestures", "title": "Swift: Gestures", "category": "swift", "tags": "ios gestures swipe pinch", "content" :"OverviewGestures are a big part of mobile development. This post is all about how to add gestures in iOS dev. You can find more information about gestures on Ray Wenderlich’s site or on ioscreator.ContentPan Gesture 1 @IBOutlet weak var pannableView: UIView { 2     didSet { 3         // the &#39;:&#39; means that the method pan will be called with an argument 4         let recognizer = UIPanGestureRecognizer(target: self, action: &quot;pan:&quot;) 5         pannableView.addGestureRecognizer(recognizer) 6     } 7 } 8 func pan(gesture: UIPanGestureRecognizer) { 9     switch gesture.state {10         case .Changed: fallthrough11         case .Ended:12             let translation = gesture.translationInView(pannableView)13             // update anything that depends on the pan gesture using tranlation.x and .y14             gesture.setTranslation(CGPointZero, inView:pannableView)15     }16 }Pinch 1 @IBOutlet weak var pinchableView: UIView { 2     didSet { 3         let recognizer = UIPinchGestureRecognizer(target: self, action: &quot;pinch:&quot;) 4         pinchableView.addGestureRecognizer(recognizer) 5     } 6 } 7 func pinch(gesture: UIPinchGestureRecognizer) { 8     switch gesture.state { 9         case .Began:10         case .Changed:11         case .Ended:12         case .Recognized13     }14     var scale:CGFloat = gesture.scale        // can reset15     var velocity:CGFloat = gesture.velocity  // readonly how fast you pinch16 }Rotate 1 @IBOutlet weak var rotatableView: UIView { 2     didSet { 3         let recognizer = UIRotationGestureRecognizer(target: self, action: &quot;rotate:&quot;) 4         rotatableView.addGestureRecognizer(recognizer) 5     } 6 } 7 func rotate(gesture: UIRotationGestureRecognizer) { 8     var rotation:CGFloat = gesture.rotation  // can reset 9     var velocity:CGFloat = gesture.velocity  // readonly how fast you rotate10 }Swipe 1 @IBOutlet weak var swipableView: UIView { 2     didSet { 3         let recognizer = UISwipeGestureRecognizer(target: self, action: &quot;swipe:&quot;) 4         rotatableView.addGestureRecognizer(recognizer) 5     } 6 } 7 func swipe(gesture: UISwipeGestureRecognizer) { 8     var direction:UISwipeGestureRecognizerDirection = gesture.direction 9     var numberOfTouchesRequired:Int = gesture.numberOfTouchesRequired10 }Tap 1 @IBOutlet weak var tapableView: UIView { 2     didSet { 3         let recognizer = UITapGestureRecognizer(target: self, action: &quot;tap:&quot;) 4         rotatableView.addGestureRecognizer(recognizer) 5     } 6 } 7 func tap(gesture: UITapGestureRecognizer) { 8     var numberOfTapsRequired:Int = gesture.numberOfTapsRequired // single tap, double tap, etc 9     var numberOfTouchesRequired:Int = gesture.numberOfTouchesRequired10 }", "date" : "March 22, 2015" },
  
    "/swift/2015/03/21/swift-initializers": {  "id": "/swift/2015/03/21/swift-initializers", "title": "Swift: Initializers", "category": "swift", "tags": "ios init", "content" :"OverviewInitializers in Swift are a little different than the ones found in other classes. This post is all about the dreadful init. You can find more information on initialization here.ContentThere are 2 kinds of inits: designated init and convenience init.1 class MyClass {2     var instanceVariable:Int3 4     init(passedVariable: Int){5         instanceVariable = passedVariable6     }7 }In an init, you must initialize all your properties. This includes constants (that use let) and optionals. Optionals can have a value of nil so they are initialized by default.1 class MyClass {2     let constantVar:String3     var optionalVar:String?4 5     init(passedVar:String) {6         constantVar = passedVar7     }8 }Designated InitA designated init must first initialize all of its own properties before calling super.init.A designated init must call super.init before assigning a value to an inherited property.Convenience InitA convenience init must call a designated init of its own class (can’t call super.init).1 class Food {2     var name: String3     init(name: String) {4         self.name = name5     }6     convenience init() {7         self.init(name: &quot;[Unnamed]&quot;)8     }9 }A convenience init must call a designated init before it can set any property values.A convenience init can call a designated init indirectly (through another convenience init) 1 class RecipeIngredient: Food { 2     var quantity: Int 3     init(name: String, quantity: Int) { 4         self.quantity = quantity 5         super.init(name: name) 6     } 7     override convenience init(name: String) { 8         self.init(name: name, quantity: 1) 9     }10 }Inherited InitIf you inherit from a class and provide no inits. You inherit all the super class’ inits.1 class ShoppingListItem: RecipeIngredient {2     var purchased = false3     var description: String {4         var output = &quot;\(quantity) x \(name)&quot;5         output += purchased ? &quot; ✔&quot; : &quot; ✘&quot;6         return output7     }8 }Required InitYou can force a subclass to override a super class’ initializer by adding required in front. 1 class SomeClass { 2     required init() { 3         // initializer implementation goes here 4     } 5 } 6  7 class SomeSubclass: SomeClass { 8     //subclass also needs a &#39;required&#39; keyword 9     required init() {10         // subclass implementation of the required initializer goes here11     }12 }Failable InitAn initializer can fail and return nil. Why would we do this? Here’s one example.1 let image = UIImage(named: &quot;imageName&quot;) //image is an (UIImage?)2 3 if let otherImage = UIImage(named: &quot;imageName&quot;) {4     // image was successfully created5 } else {6     // couldn&#39;t create the image7 }", "date" : "March 21, 2015" },
  
    "/swift/2015/03/21/swift-generics": {  "id": "/swift/2015/03/21/swift-generics", "title": "Swift: Generics", "category": "swift", "tags": "ios generics", "content" :"OverviewGenerics are extremely useful in any programming language. This post is all about generics in swift as the title implies. You can find more information about swift generics here.ContentClass1 struct Stack&lt;T&gt; {2     var items = [T]()3     mutating func push(item: T) {4         items.append(item)5     }6     mutating func pop() -&gt; T {7         return items.removeLast()8     }9 }Methods/Functions1 func swapTwoValues&lt;T&gt;(inout a: T, inout b: T) {2     let temporaryA = a3     a = b4     b = temporaryA5 }Type Constraints 1 func allItemsMatch&lt;C1: Container, C2: Container  2     where C1.ItemType == C2.ItemType, C1.ItemType: Equatable&gt; 3     (someContainer: C1, anotherContainer: C2) -&gt; Bool { 4         // check that both containers contain the same number of items 5         if someContainer.count != anotherContainer.count { 6             return false 7         } 8          9         // check each pair of items to see if they are equivalent10         for i in 0..&lt;someContainer.count {11             if someContainer[i] != anotherContainer[i] {12                 return false13             }14         }15         16         // all items match, so return true17         return true18 }", "date" : "March 21, 2015" },
  
    "/swift/2015/03/19/swift-pass-by-reference": {  "id": "/swift/2015/03/19/swift-pass-by-reference", "title": "Swift: Pass By Reference", "category": "swift", "tags": "swift inout reference", "content" :"OverviewIn some cases, you would like to pass a variable by reference. In Swift, we use the inout and the &amp; keys.Here’s an example of a generic swap. 1 var lucky = 7 2 var unlucky = 13 3  4 func swapTwoVariables&lt;T&gt;(inout first: T, inout second: T) { 5     let temp = first 6     first = second 7     second = temp 8 } 9 10 swapTwoVariables(&amp;lucky, &amp;unlucky)11 12 println(&quot;lucky: \(lucky)   unlucky: \(unlucky)&quot;)13 // &quot;lucky: 13   unlucky: 7&quot;", "date" : "March 19, 2015" },
  
    "/swift/2015/03/19/swift-for-c-developers": {  "id": "/swift/2015/03/19/swift-for-c-developers", "title": "Swift: for C# developers", "category": "swift", "tags": "c# comparison", "content" :"OverviewHere’s a small Swift vs C# comparison.", "date" : "March 19, 2015" },
  
    "/javascript/2015/03/02/using-react-with-grunt-and-browserify": {  "id": "/javascript/2015/03/02/using-react-with-grunt-and-browserify", "title": "Using React with Grunt and Browserify", "category": "javascript", "tags": "grunt reactjs browserify", "content" :"OverviewIf we want to set up a fast way to develop React web apps, we have to be able to compile jsx files quickly. To accomplish this, we use browserify and grunt. Read the following posts before going further: Setup Grunt, Continuous NodeJS.Step 1: Installation 1 # ### in Terminal ### 2 npm install --save react 3  4 npm install --save-dev grunt 5 npm install --save-dev load-grunt-tasks 6  7 npm install --save-dev grunt-contrib-watch 8 npm install --save-dev grunt-contrib-clean 9 npm install --save-dev grunt-nodemon10 npm install --save-dev grunt-concurrent11 12 npm install --save-dev grunt-browserify13 npm install --save-dev grunt-react14 15 touch Gruntfile.jsStep 2: Setup 1 // ### in Gruntfile.js ### 2  3 module.exports = function(grunt){ 4     require(&#39;load-grunt-tasks&#39;)(grunt); 5     grunt.initConfig({ 6         watch: { 7             livereload: { 8                 tasks: [&#39;clean&#39;, &#39;browserify&#39;], 9                 options: {10                     livereload: true11                 },12                 files: [13                     &#39;./public/**/*.less&#39;,14                     &#39;./public/**/*.jsx&#39;,15                     &#39;./public/**/*.js&#39;,16                     &#39;./views/**/*.ejs&#39;17                 ]18           }19         }, // End watch20 21         nodemon: {22             dev: {23                 options: {24                     nodeArgs: [&#39;--debug&#39;],25                     file: &#39;--debug ./bin/www&#39;26                 }27             }28         }, //End nodemon29 30         concurrent: {31             dev: {32                 options: {33                     logConcurrentOutput: true34                 },35                 tasks: [&#39;watch&#39;, &#39;nodemon:dev&#39;]36             }37         }, // End concurrent38 39         clean: {40             build: {41                 src: [&#39;./public/javascripts/build.min.js&#39;]42             }43         }, // End clean44 45         browserify: {46             options: {47                 transform: [ require(&#39;grunt-react&#39;).browserify ]48             },49             files: {50                 src: [&#39;./public/javascripts/**/*.jsx&#39;, &#39;./public/javascripts/**/*.js&#39;],51                 dest: &#39;./public/javascripts/build.min.js&#39;52             }53         } // End browserify54     });55 56     grunt.registerTask(&#39;default&#39;, [&#39;clean&#39;, &#39;browserify&#39;, &#39;concurrent:dev&#39;]);57 };watch: Will watch changes and run clean, browserify and reload.nodemon: Will restart the server when files change.concurrent: Will run both watch and nodemon at the same time.clean: Will remove the old build.min.jsbrowserify: Will concatinate all the js files and jsx files into 1.Step 3: DevWith this setup, we can add jsx and js files. Your directory (at the beginning… it shouldn’t look this way) will look like this.  1 . 2 ├── Gruntfile.js 3 ├── app.js 4 ├── bin 5 │   └── www 6 ├── package.json 7 ├── public 8 │   ├── images 9 │   ├── javascripts10 │   │   ├── build.min.js11 │   │   ├── driver.jsx12 │   │   └── test.jsx13 │   └── stylesheets14 │       ├── style.css15 │       └── style.less16 ├── routes17 │   ├── index.js18 │   └── users.js19 └── views20     ├── error.ejs21     └── index.ejs 1 // ### in test.jsx ### 2  3 /** @jsx React.DOM */ 4  5 var React = require(&#39;react&#39;); 6 var Test = React.createClass({ 7     render: function(){ 8         return ( 9             &lt;h1&gt;Hello From React&lt;/h1&gt;10         );11     }12 });13 module.exports = Test; 1 // ### in driver.jsx ### 2  3 /** @jsx React.DOM */ 4  5 var React = require(&#39;react&#39;); 6 var Test = require(&#39;./test.jsx&#39;); 7  8 window.onload = function(){ 9     React.render(&lt;Test /&gt;, document.body);10 };You have to make sure to require build.min.js in index.ejs.Now you can simply call grunt and the server will start up. Any change you make to a jsx, js, less or ejs file will reload the server and the browser tab.", "date" : "March  2, 2015" },
  
    "/javascript/2015/03/02/continuous-development-in-nodejs": {  "id": "/javascript/2015/03/02/continuous-development-in-nodejs", "title": "Continuous Development in Node.js", "category": "javascript", "tags": "nodejs watch livereload express", "content" :"OverviewThis post is all about continuous development using NodeJS and Express 4. I’m going to be basing this post off of this blog post.Step 1: Installation 1 # global 2 npm install -g express 3 npm install -g express-generator 4 npm install -g grunt-cli 5  6 # create express app with EJS for template, Less for css and a .gitignore file 7 express -e -c less --git 8 touch Gruntfile.js 9 10 # dev11 npm install --save-dev grunt12 npm install --save-dev load-grunt-tasks13 npm install --save-dev grunt-contrib-watch14 npm install --save-dev grunt-nodemon15 npm install --save-dev grunt-concurrentExplanationload-grunt-tasks: will be used to load all the grunt tasks right away.grunt-contrib-watch: will allow us to watch for file changes and execute grunt tasks.grunt-nodemon: we will use it to reload the server when a file changes.grunt-concurrent: watch has livereload built in, so we want to be able to reload the page and restart server automatically.StructureThe directory should look like this: 1 . 2 ├── Gruntfile.js 3 ├── app.js 4 ├── bin 5 │   └── www 6 ├── package.json 7 ├── public 8 │   ├── images 9 │   ├── javascripts10 │   └── stylesheets11 │       └── style.less12 ├── routes13 │   ├── index.js14 │   └── users.js15 └── views16     ├── error.ejs17     └── index.ejsStep 2: Setup 1 // ### in Gruntfile.js ### 2 &#39;use strict&#39;; 3  4 module.exports = function(grunt){ 5     require(&#39;load-grunt-tasks&#39;)(grunt); 6     grunt.initConfig({ 7          8         watch: { 9             livereload: {10                 options: {11                     livereload: true12                 },13                 files: [14                     &#39;public/**/*.{less,js}&#39;,15                     &#39;views/**/*.ejs&#39;16                 ]17           }18         }, // End watch19 20         nodemon: {21             dev: {22                 options: {23                     nodeArgs: [&#39;--debug&#39;],24                     file: &#39;--debug ./bin/www&#39;25                 }26             }27         }, //End nodemon28 29         concurrent: {30             dev: {31                 options: {32                     logConcurrentOutput: true33                 },34                 tasks: [&#39;watch&#39;, &#39;nodemon:dev&#39;]35             }36         }, // End concurrent37 38     });39 40     grunt.registerTask(&#39;default&#39;, [&#39;concurrent:dev&#39;]);41 };Step 3: DevNow you can simply call grunt and the server will start up. When you make a change to a file and save, it will refresh the page.", "date" : "March  2, 2015" },
  
    "/javascript/2015/02/28/learn-react-part-8-flux-architecture": {  "id": "/javascript/2015/02/28/learn-react-part-8-flux-architecture", "title": "Learn React Part 8: Flux Architecture", "category": "javascript", "tags": "reactjs flux", "content" :"OverviewFlux is a type of web application architecture that plays nicely with React’s unidirectional data flow. You can find all the information from this post and a lot more in the Full Stack Flux video and the HTMLDevConf React Flux video. The images are from both those videos, the creators own all the rights to them.Old WayLet’s take the facebook chat as the example. If we wanted to get the number of unread messages for each thread (unread messages per person).1 var unreadMessageCounts = {};2 function onNewMessage(msg){3     // increment the old count and cache the new count4     var unreadCount = ++unreadMessageCounts[msg.threadId];5     // update DOM6     $(&#39;#messageCount&#39; + msg.threadId).text(unreadCount);7 }This is nice and all, but what happens if we want to know how many threads have unread messages (number of conversations that have unread messages)? We would have to update our code. 1 var unreadMessageCounts = {}; 2 var unreadThreadCount = 0; 3  4 function onNewMessage(msg){ 5     // increment the old count and cache the new count 6     var unreadCount = ++unreadMessageCounts[msg.threadId]; 7     if (unreadCount === 0) { 8         // increment number of unread threads 9         ++unreadThreadCount;10         // update DOM for threads11         $(&#39;#unreadThreads&#39;).text(unreadThreadCount);12     }13 14     // update DOM for the conversation15     $(&#39;#messageCount&#39; + msg.threadId).text(unreadCount);16 }You then create models that hold the information. Like a Conversation model and a Notification model. Well the Notification model needs to know when the Conversation model updates like when someone sends you a message and a little unread icon appears next to messages.It’s complicated already… It becomes even more complicated with more models.Some people use pub/sub which is nice… until you want the models to get the data in a certain order. (The notification bar which holds everything gets the message before the Conversation).New WayThere is a clean way to handle this issue. Using a unidirectional data flow. Flux’s architecture looks something like this.Action: object with a type property and new dataAction Creator: methods that create Actions, they become the API. 1 // ### in FooActionCreator.js ### 2  3 var AppDispatcher = require(&#39;../AppDispatcher&#39;); 4 var AppConstants = require(&#39;../AppConstants&#39;); 5  6 var ActionTypes = AppConstants.ActionTypes; 7  8 module.exports = { 9     // Action Creator10     createMessage(text){11         // That new object is an Action12         AppDispatcher.dispatch({13             type: ActionTypes.MESSAGE_CREATE,14             text: text15         });16     }17 };Dispatcher: It’s basically a registry of callbacks. The Flux dispatcher is a singleton. Payload is an Action. Primary API: dispatch(), register(), waitFor()1 // ### in AppDispatcher.js ###2 3 var Dispatcher = require(&#39;Flux.Dispatcher&#39;);4 5 // export singleton6 module.exports = new Dispatcher();Store: Each store is a singleton. Holds the data. Only way into the store is through the callback from the Dispatcher. Only has getters, no setters. It emits “I changed” events when the state changes. 1 // ### in FooStore ### 2  3 var _dispatchToken; 4 var _messages = {}; 5  6 class FooStore extends EventEmitter { 7     constructor(){ 8         super(); 9 10         _dispatcherToken = AppDispatcher.register( (action) =&gt; {11             switch(action.type){12                 case ActionTypes.MESSAGE_CREATE:13                     var message = {14                         id: Date.now(),15                         text: action.text16                     };17                     _messages[message.id] = message;18                     this.emit(&#39;change&#39;);19                     break;20 21                 case ActionTypes.MESSAGE_DELETE:22                     delete _messages[action.messageId];23                     this.emit(&#39;change&#39;);24                     break;25 26                 default:27             }// End switch28         });// End AppDispatcher.register29     }// End constructor30 31     getDispatchToken(){32         return _dispatchToken;33     }34 35     getMessages(){36         return _messages;37     }38 }39 module.exports = new FooStore();Views: Tree of react components. The components near the top of the tree listen for store changes. When there’s a store change, they query the store for new data and pass it down to children.We fist create our ControllerView which retrieves the data from the Store. 1 // ### in FooControllerView.react.js ### 2  3 var React = require(&#39;react&#39;); 4  5 var FooControllerView = React.createClass({ 6     getInitialState: function(){ 7         return { 8             messages: FooStore.getMessages(); 9         };10     },11 12     componentDidMount: function(){13         FooStore.on(&#39;change&#39;, this._onChange);14     },15 16     componentWillUnmount: function(){17         FooStore.removeListener(&#39;change&#39;, this._onChange);18     },19 20     _onChange: function(){21         this.setState({22             messages: FooStore.getMessages();23         });24     },25 26     render: function(){27         //TODO28     }29 });30 31 module.exports = FooControllerView; 1 render: function(){ 2     var messageListItems = this.state.messages.map(message =&gt; { 3         return ( 4             &lt;FooChild 5                 key={message.id} 6                 id={message.id} 7                 text={message.text} 8             /&gt; 9         );10     }); // End messageListItems11 12     return (13         &lt;ul&gt;14             {messageListItems}15         &lt;/ul&gt;16     );17 }// End renderWe now have to create FooChild which will display each message. 1 // ### in FooChild.react.js ### 2  3 var React = require(&#39;react&#39;); 4  5 var FooChild = React.createClass({ 6     propTypes = { 7         id: React.PropTypes.number.isRequired, 8         text: React.PropTypes.number.isRequired 9     }10 11     render: function(){12         return (13             &lt;li&gt;{this.props.text}&lt;/li&gt;14         );15     }16 });17 18 module.exports = FooChild;InitializationInside AppBoostrap.js, we use the dispatcher and have it load the contents of every store and only after every store has content do we render.Web ApiPut all the Api calls into a WebApiUtils module.", "date" : "February 28, 2015" },
  
    "/javascript/2015/02/25/javascript-to-remember": {  "id": "/javascript/2015/02/25/javascript-to-remember", "title": "JavaScript to Remember", "category": "javascript", "tags": "callbacks promises context", "content" :"OverviewTable of content  String  Callbacks  Promises  Context  Sorting  Bit Manipulation  Math  Latest Version1. String 1 &quot;A string  &quot; 2 .toLowerCase()        // &quot;a string  &quot; 3 .toUpperCase()        // &quot;A STRING  &quot; 4  5 //takes a delimiter 6 .split(&quot;&quot;)            // [&#39;A&#39;, &#39; &#39;, &#39;s&#39;, &#39;t&#39;, &#39;r&#39;, &#39;i&#39;, &#39;n&#39;, &#39;g&#39;, &#39; &#39;, &#39; &#39;] 7  8 //with split ^ 9 .join()               // &quot;A string  &quot;10 11 //takes startPos endPos12 .substring(2, 4)      // &quot;st&quot;13 14 .indexOf(&quot;str&quot;)       // 215 16 .trim()               // &quot;A string&quot;17 18 .replace(&quot;string&quot;, &quot;blah&quot;); // &quot;A blah  &quot;19 20 .match(/a str.*/i)    // &quot;A string  &quot;21 22 //takes in a position23 .charAt(0)            // &quot;A&quot;24 .charCodeAt(0)        // 6525 26 //takes in base27 4.toString(2)         // 1102. CallbacksCallbacks are a big part of javascript.1 function callFuncOnFive(cb){2   return cb(5);3 }4 5 var returnedValue = callFuncOnFive(function(num){6   return num * num;7 });8 9 console.log(returnedValue); // 25 (5*5)3. PromisesPromises allow you to flatten a callback pyramid 1 //using callbacks 2 function one() { 3   function two() { 4     function three() { 5        6     } 7   } 8 } 9 10 //using promises11 promiseOne()12   .then(promiseTwo)13   .then(promiseThree);A popular promise library for nodejs is Q 1 //it allows you to do many awesome things like 2 var Q = require(&quot;q&quot;); 3  4  5 //chain promises 6 promiseOne() 7   .then(promiseTwo) 8   .then(promiseThree) 9   .then(function() {10     //normal anonymous function11   })12   .fail(function(error) {13     //can handle error14   })15   .done();16   17   18 //Create promises from async methods19 Q.ninvoke(obj, &quot;asyncMethod&quot;, {20     param1: &quot;parameter&quot;21   })22   .then(function(resultFromAsyncMethod) {23     //do stuff24   });25   26 27 //Use callbacks and promises together28 function async(err, val){29   //this is a async callback30   var deferred = Q.defer();31   32   if (err) {33     deferred.reject(new Error(err));34   } else {35     deferred.resolve(val);36   }37   return deferred.promise;38 }39 40 41 //A value can be turned into a promise42 Q({ x:5 })43  .then(function(val){44   //val == 545  });4. ContextHoistingJavascript hoists variable declarations 1 function blah() { 2   var a = 1; 3 } 4  5 //is the same as 6  7 var a; 8 function sameBlah() { 9   a = 1;10 }It also hoists up function declarations 1 function outerFunc() { 2   //How did it work?? I called innerFunc before initialization it! 3   innerFunc(); 4  5   function innerFunc() { 6     console.log(5); 7   } 8 } 9 10 //is not the same as11 function outerFunc() {12   x(); //won&#39;t work13 14   var x = function() {15     console.log(5);16   }17   18   x(); //will work19 }Bind method 1 //instead of doing something like this 2 obj = { 3 ... 4   render: function () { 5     var that = this; //have to do this every time... 6     this.getAsyncData(function () { 7       that.specialFunction(); 8       that.anotherSpecialFunction(); 9     });10   }11 ...12 };13 14 15 //We do16 obj = {17 ...18   render: function () {19     this.getAsyncData(function () {20       this.specialFunction();21       this.anotherSpecialFunction();22     }.bind(this)); 23     //This bind means that when getAsyncData gets called24     //this === obj25   }26 ...27 };5. SortingSorting in javascript is easy 1 var sorted = [4, 3, 5, 2, 1].sort(function(a, b) { 2   return a-b; 3 }); 4 console.log(sorted) // [1, 2, 3, 4, 5] 5  6  7 var reversed = [4, 3, 5, 2, 1].sort(function(a, b) { 8   return b-a; 9 });10 console.log(reversed) // [5, 4, 3, 2, 1]6. Bit ManipulationBit operators        Operation name    Javascript symbol    Example    Result    Explanation          AND    &amp;    7 &amp; 5    5    111 &amp; 101 = 101          OR    |    8 | 3    11    1000 | 0011 = 1011          XOR    ^    15 ^ 5    10    1111 ^ 0101 = 1010          Right Shift    &gt;&gt;    7 &gt;&gt; 1    3    111 &gt;&gt; 1 = 011          Not    ~    ~0    -1    ~000 = 111 which is 2's complement -1  7. Math1 var x = Math.random() // float [0, 1[2 Math.floor((Math.random() * 100) + 1); // int [1, 100[8. Latest VersionThe latest javascript is ECMA6 check out the features.", "date" : "February 25, 2015" },
  
    "/python/2015/02/15/python-to-remember": {  "id": "/python/2015/02/15/python-to-remember", "title": "Python To Remember", "category": "python", "tags": "string array dictionary set hash", "content" :"OverviewExample code can be found hereTable of content  Arrays  Dicts  Numbers  Probability  String  Other1. Arrays 1 x = list(&quot;4321&quot;)  # [&quot;4&quot;, &quot;3&quot;, &quot;2&quot;, &quot;1&quot;] 2 x.append(&quot;val1&quot;)  # [&quot;4&quot;, &quot;3&quot;, &quot;2&quot;, &quot;1&quot;, &quot;val1&quot;] 3 x.pop()           # [&quot;4&quot;, &quot;3&quot;, &quot;2&quot;, &quot;1&quot;] 4 x.pop(0)          # [&quot;3&quot;, &quot;2&quot;, &quot;1&quot;] 5 x.insert(0,4)     # [&quot;4&quot;, &quot;3&quot;, &quot;2&quot;, &quot;1&quot;] 6 x.sort()          # [&quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;] 7 x.reverse()       # [&quot;4&quot;, &quot;3&quot;, &quot;2&quot;, &quot;1&quot;] 8 x = x[::-1]       # [&quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;] 9 max(x)            # &quot;4&quot;10 11 y = [&quot;ab&quot;, &quot;cde&quot;, &quot;efgh&quot;, &quot;ij&quot;]12 sorted(y, key = len)    # [&#39;ab&#39;, &#39;ij&#39;, &#39;cde&#39;, &#39;efgh&#39;]13 sorted(y, key = len, reverse = True)  # [&#39;efgh&#39;, &#39;cde&#39;, &#39;ab&#39;, &#39;ij&#39;]2. Dicts1 dic = {&quot;y&quot;: 6, &quot;x&quot;: 5}2 dic.keys()         # [&quot;y&quot;, &quot;x&quot;]3 dic.values()       # [6, 5]4 dic[&quot;z&quot;] = 4       # dic = {&quot;y&quot;: 6, &quot;x&quot;: 5, &quot;z&quot;: 4}5 dic.pop(&quot;z&quot;, None) # dic = {&quot;y&quot;: 6, &quot;x&quot;: 5}6 7 dict( [(&quot;hello&quot;,1), (&quot;thing&quot;,2), (&quot;yay&quot;, 3)] )8 # {&#39;thing&#39;: 2, &#39;yay&#39;: 3, &#39;hello&#39;: 1}3. Numbers1 int(&quot;4&quot;)          # 42 &quot;{0:b}&quot;.format(4) # &#39;101&#39;3 2**3              # 8 (2^3)4 4**.5             # 2.04. Probability1 import itertools2 3 itertools.combinations(array,x)  # array choose x4 for comb in itertools.combinations(array,x):5   # do stuff6   7 itertools.permutations(arr, x)   # permutation8 for comb in itertools.permutations(array,x):9   # do stuff5. String 1 x = raw_input()  # &quot;A bcdefg  &quot; 2  3 len(x)      # 10 4 x[0]        # &quot;A&quot; 5 sorted(x)   # [&#39; &#39;, &#39; &#39;, &#39; &#39;, &#39;A&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;, &#39;g&#39;] 6  7 x.lower()   # &quot;a bcdefg  &quot; 8 x.upper()   # &quot;A BCDEFG  &quot; 9 10 x += str(5) # &quot;A bcdefg  5&quot;11 x[:-1]      # &quot;A bcdefg  &quot;12 x[2:4]      # &quot;bc&quot;         x[startIndex:endIndexExluded:step]13 14 x.title()       # &quot;A Bcdefg  &quot;15 x[0].isalpha()  # True16 x[0].isdigit()  # False17 18 x.split()       # [&quot;A&quot;, &quot;bcdefg&quot;]19 &quot;&quot;.join( sorted(x) )  # &quot;   Abcdefg&quot;6. Other 1 # ternery 2 5 if booleanValue else 6  # (booleanValue)? 5 : 6; 3  4 # generate new list from existing list 5 x = [&#39;a&#39;, &#39;1&#39;, &#39;b&#39;, &#39;2&#39;, &#39;c&#39;, &#39;3&#39;, &#39;d&#39;, &#39;4&#39;] 6 x = [c for c in x if c.isalpha()]   # [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;] 7 x = [c for c in x if c.isdigit()]   # [&#39;1&#39;, &#39;2&#39;, &#39;3&#39;, &#39;4&#39;] 8  9 # get idx and value in loop10 for idx, val in enumerate(array):11 12 # sets13 # https://docs.python.org/2/library/sets.html14 s = set([1, 1, 3, 5, 6, 6, 4])      # set([1, 3, 4, 5, 6])15 s.add(8)                            # set([1,3,4,5,6,8])16 s.discard(3)                        # set([1,4,5,6,8])17 s.remove(4)                         # set([1,5,6,8]) throws error if key not present18 6 in s                              # True", "date" : "February 15, 2015" },
  
    "/javascript/2015/02/14/learn-react-part-7-using-node-and-socketio": {  "id": "/javascript/2015/02/14/learn-react-part-7-using-node-and-socketio", "title": "Learn React Part 7: using Node and Socket.io", "category": "javascript", "tags": "react nodejs browserify reactify watchify less express socketio", "content" :"OverviewThis is Part 2 of my using Node and React series. We’re going to continue where we left off in Part 1. 1 . 2 ├── app.js 3 ├── client.js 4 ├── components 5 │   ├── MyApp.react.js 6 │   ├── MyAppList.react.js 7 │   └── MyAppListItem.react.js 8 ├── package.json 9 ├── public10 │   ├── images11 │   ├── javascripts12 │   │   └── build.min.js13 │   └── stylesheets14 │       ├── style.css15 │       └── style.less16 ├── routes17 │   ├── index.js18 │   └── socketHandler.js19 └── views20     └── index.ejsSocket.ioThe first thing we need to do is add the socket.io library in our client.1 &lt;!-- in ./views/index.ejs --&gt;2 &lt;script src=&quot;https://cdn.socket.io/socket.io-1.1.0.js&quot;&gt;&lt;/script&gt;Now on the server side we’re going to setup socket.io.1 /* in ./app.js */2 3 // at the end of the file4 var io = require(&#39;socket.io&#39;).listen(server);5 require(&#39;./routes/socketHandler&#39;)(io);Now we have to write how socket.io handles messages. 1 /* in ./routes/socketHandler.js */ 2 &quot;use strict&quot;; 3  4 module.exports = function(io){ 5   io.on(&#39;connection&#39;, function(socket){ 6      7     // send to everyone except for socket 8     console.log(&#39;user connected &#39; + socket.id); 9     socket.broadcast.emit(&#39;message&#39;, &#39;user connected &#39; + socket.id);10 11     // Disconnect12     socket.on(&#39;disconnect&#39;, function(){13       console.log(&#39;user disconnected &#39; + socket.id);14       socket.broadcast.emit(&#39;message&#39;, &#39;user disconnected &#39; + socket.id);15       // send to everone including socket16       // socket.emit(&#39;message&#39;, &#39;user disconnected &#39; + socket.id);17     });18 19     // Message event20     socket.on(&#39;message&#39;, function(msg){21       socket.emit(&#39;message&#39;,msg);22     });23 24   });// end connection25 };At the end, we’ll have 3 react components: MyApp, MyAppList and MyAppListItem. This is the end result.  MyAppWe have to add 2 methods:componentDidMount - the component has finished renderinggetInitialState - as the name implies, it returns the initial state 1 /** @jsx React.DOM */ 2  3 var React = require(&#39;react&#39;); 4 var MyAppList = require(&#39;./MyAppList.react&#39;); 5  6 module.exports = MyApp = React.createClass({ 7   getInitialState: function(){ 8     return { 9       messages: []10     };11   },12   componentDidMount: function(){13     var self = this;14     var socket = io.connect();15     socket.on(&#39;message&#39;, function(msg){16       var messages = self.state.messages;17       messages.push(msg);18       self.setState(messages);19     });20   },21   render: function(){22     return (23       &lt;MyAppList messages={this.state.messages} /&gt;24     )25   }26 });  MyAppList 1 /** @jsx React.DOM */ 2  3 var React = require(&#39;react&#39;); 4 var MyAppListItem = require(&#39;./MyAppListItem.react&#39;); 5  6 module.exports = MyAppList = React.createClass({ 7   render: function(){ 8     var listItems = this.props.messages.map(function(item){ 9       return (&lt;MyAppListItem message={item} /&gt;);10     });11 12     return (13       &lt;ul&gt;14         {listItems}15       &lt;/ul&gt;16     )17   }// render18 });// MyAppList  MyAppListItem 1 /** @jsx React.DOM */ 2  3 var React = require(&#39;react&#39;); 4  5 module.exports = MyAppListItem = React.createClass({ 6   render: function(){ 7       return ( 8         &lt;li&gt;{this.props.message}&lt;/li&gt; 9       )10   }11 });", "date" : "February 14, 2015" },
  
    "/javascript/2015/02/14/learn-node-part-9-webscraper": {  "id": "/javascript/2015/02/14/learn-node-part-9-webscraper", "title": "Learn Node Part 9: WebScraper", "category": "javascript", "tags": "nodejs express mocha mocha-webdriver", "content" :"OverviewInitially I wanted to scrape a school site for class schedules using the node modules cheerio and request. It turns out that the site I wanted to scrape uses an iframe for the data… and request doesn’t like those. So I decided to switch to selenium and grunt-mocha-webdriver.You can find more information here.InstallationStep 11 ### Command Line ###2 3 # Get the right packages4 npm install --save-dev grunt5 npm install --save-dev load-grunt-tasks6 npm install --save-dev grunt-mocha-webdriverStep 2 1 // ### in Gruntfile.js ### 2  3 module.exports = function(grunt) { 4  5   require(&#39;load-grunt-tasks&#39;)(grunt); 6   grunt.initConfig({ 7     mochaWebdriver: { 8       options: { 9         timeout: 1000 * 60 * 3,10         reporter: &#39;spec&#39;11       },12       chrome: {13         src: [&#39;scrape/index.js&#39;],14         options: {15           testName: &#39;scrapping&#39;,16           hostname: &#39;localhost&#39;,17           port:   &#39;4444&#39;,18           usePromises: true,19           autoInstall: true,20           browsers: [21             {browserName: &#39;chrome&#39;}22           ]23         }24       }25     }// end mochaWebdriver26   });27 28   grunt.registerTask(&#39;default&#39;, [&quot;mochaWebdriver:chrome&quot;]);29 };Step 31 // ### in scrape/index.js ###2 3 // declare a simple mocha test4 describe(&quot;Scraping&quot;, function() {5   it(&quot;should just go to the url and wait&quot;, function() {6     // instructions go here7   });8 });Step 4 1 // ### in scrape/index.js ### 2  3 var jsCode = &quot;console.log(&#39;this will execute in the browser&#39;)&quot;; 4 var page = { 5   url: &quot;url&quot;, 6   body: &quot;#body-id&quot;, 7   submit: &quot;#submit-btn-id&quot; 8 }; 9 10 it(&quot;should just go to the url&quot;, function() {11   this.browser12       .get(page.url)13       .waitForElementByCss(page.body, this.wd.asserters.isDisplayed)14       .execute(jsCode)15       .elementByCss(page.submit)16       .click()17       .sleep(4000);18 });", "date" : "February 14, 2015" },
  
    "/javascript/2015/02/14/learn-node-part-8-passport": {  "id": "/javascript/2015/02/14/learn-node-part-8-passport", "title": "Learn Node Part 8: Passport", "category": "javascript", "tags": "nodejs passportjs", "content" :"OverviewIf you ever wondered how people use the Sign in with Google way of logging in, here’s how. You can find more information here.InstallationStep 11 ### Command Line ###2 3 # Get the right packages4 npm install --save passport5 npm install --save passport-googleStep 21 // ### in app.js ###2 3 // At the top4 var passport = require(&#39;passport&#39;);5 6 // Add middleware7 app.use(passport.initialize());8 app.use(app.router);  // has to be before this lineStep 3 1 // ### in config/passport-config.js ### 2  3 var passport = require(&#39;passport&#39;) 4   , GoogleStrategy = require(&#39;passport-google&#39;).Strategy; 5  6  7 // For persistent login 8 passport.serializeUser(function(user, done) { 9   done(null, user);10 });11 passport.deserializeUser(function(obj, done) {12   done(null, obj);13 });14 15 16 passport.use(new GoogleStrategy({17     returnURL: &#39;http://localhost:3000/auth/google/return&#39;,18     // Where it&#39;s valid19     realm: &#39;http://localhost:3000/&#39;20   },21   function(identifier, profile, done) {22     process.nextTick(function () {23       profile.identifier = identifier;24       return done(null, profile);25     });26   }27 ));Step 4 1 // ### in app.js ### 2  3 // at the bottom 4 require(&#39;./config/passport-config&#39;); 5  6 app.get(&#39;/auth/google&#39;, passport.authenticate(&#39;google&#39;, { 7   scope: [&#39;email&#39;] 8 })); 9 10 app.get(&#39;/auth/google/return&#39;, passport.authenticate(&#39;google&#39;, {11   successRedirect: &quot;/good&quot;,12   failureRedirect: &quot;/bad&quot;13 }));", "date" : "February 14, 2015" },
  
    "/javascript/2015/02/14/learn-node-part-7-browserify": {  "id": "/javascript/2015/02/14/learn-node-part-7-browserify", "title": "Learn Node Part 7: Browserify", "category": "javascript", "tags": "nodejs grunt bower browserify", "content" :"OverviewNodeJS has the most amazing package manager, npm that allows you to install modules easily. After installing a module, you can simply require it by doing require(‘moduleName’). Wouldn’t it be great if you could do that on the client side too? Using browserify, you can.You can find more information here.InstallationStep 1 1 ### Command Line ### 2  3 # Get the right packages 4 npm install -g grunt-cli 5  6 npm install --save-dev bower 7 npm install --save-dev debowerify 8  9 npm install --save-dev load-grunt-tasks10 npm install --save-dev grunt11 npm install --save-dev grunt-contrib-clean12 npm install --save-dev grunt-browserifyStep 21 ### Command Line ###2 3 # Create a Gruntfile.js4 touch Gruntfile.js5 touch bower.json6 touch .bowerrcStep 3 1 // ### in bower.json ### 2 { 3     &quot;name&quot;: &quot;Server14Browserify&quot;, 4     &quot;version&quot;: &quot;0.0.1&quot;, 5     &quot;dependencies&quot;: {} 6 } 7  8 // ### in .bowerrc ### 9 {10     &quot;directory&quot;: &quot;public/bower_components&quot;11 }Step 41 // ### in package.json ###2 3 // add the following4 &quot;browserify&quot; : {5   &quot;transform&quot;: [&quot;debowerify&quot;]6 }Step 5 1 // ### in Gruntfile.js ### 2  3 module.exports = function(grunt) { 4   require(&#39;load-grunt-tasks&#39;)(grunt); 5   grunt.initConfig({ 6     // will clean 7     clean: { 8         build: { 9             src: [&#39;public/javascripts/build.js&#39;]10         }11     },12 13     // will browserify all the js files14     browserify: {15         client: {16             src: [&#39;public/javascripts/**/*.js&#39;],17             dest: &#39;public/javascripts/build.js&#39;18         }19     }20   });21 22   grunt.registerTask(&#39;default&#39;, [&#39;clean&#39;, &#39;browserify:client&#39;]);23 };Step 6 1 // ### in public/javascripts/index.js ### 2  3 // you can now require node modules or bower modules, or even other js files 4 var unique = require(&#39;uniq&#39;); 5 var $ = require(&quot;jquery&quot;); 6  7 var data = [1, 2, 2, 3, 4, 5, 5, 5, 6]; 8  9 console.log($(&quot;body&quot;).html());10 console.log(unique(data));Step 71 ### in Command Line ###2 3 # running this will generate a build.js file4 # that contains all the js you need (jquery + uniq + index.js)5 # to use it, simply make a script with that file as the src6 gruntHow to useAfter installing the modules you want to use (using bower or npm), you simply require them in your file 1 // ### in public/javascripts/index.js ### 2  3 var unique = require(&#39;uniq&#39;);               // node module 4 var $ = require(&#39;jquery&#39;);                  // bower module 5 var sayMyName = require(&#39;./sayMyName&#39;);     // own module 6  7 var data = [1, 2, 2, 3, 4, 5, 5, 5, 6]; 8  9 console.log(&quot;&#39;Uniq&#39; node module&quot;, unique(data));10 console.log(&quot;&#39;jQuery&#39; bower module&quot;, $(&#39;body&#39;).html());11 console.log(&quot;&#39;sayMyName&#39;, own module&quot;, sayMyName());To make your own file into a module, you use module.exports like you would in node1 // ### in public/javascripts/sayMyName.js ###2 3 module.exports = function(){4     return &quot;This is sparta&quot;;5 };", "date" : "February 14, 2015" },
  
    "/javascript/2015/02/14/learn-node-part-6-mocha-testing": {  "id": "/javascript/2015/02/14/learn-node-part-6-mocha-testing", "title": "Learn Node Part 6: Mocha Testing", "category": "javascript", "tags": "nodejs mochajs chai supertest grunt", "content" :"OverviewOn the client side, you have Karma for unit testing. On the server side, there’s Mocha. This example project will demonstrate how to use mocha efficiently.You can find more information here.InstallationStep 1 1 ### Command Line ### 2  3 # Get the right packages 4 npm install -g grunt-cli 5  6 # Grunt modules 7 npm install --save-dev grunt 8 npm install --save-dev load-grunt-tasks 9 npm install --save-dev grunt-mocha-test10 11 # Testing modules12 npm install --save-dev chai13 npm install --save-dev chai-as-promised14 npm install --save-dev mocha15 npm install --save-dev supertest16 npm install --save-dev supertest-as-promisedStep 21 ### Command Line ###2 3 # Create a Gruntfile.js4 touch Gruntfile.jsStep 3 1 // ### in Gruntfile.js ### 2  3 module.exports = function(grunt) { 4  5   require(&#39;load-grunt-tasks&#39;)(grunt); 6   grunt.initConfig({ 7       mochaTest: { 8             test: { 9                 options: {10                     reporter: &#39;spec&#39;11                 },12                 src: [&#39;test/**/*.js&#39;]13             }14         }15   });16   17   // now &quot;grunt&quot; will run our tests18   grunt.registerTask(&#39;default&#39;, [&#39;mochaTest&#39;]);19 };Step 41 // ### in app.js ###2 3 // At the end of the file add this line4 module.exports = app;5 // This will allow you to require the app to use with supertestStep 5 1 // ### in test/myTest.js ### 2  3 // Get the app and create a new supertest 4 var app = require(&#39;../app&#39;); 5 var agent = require(&#39;supertest-as-promised&#39;)(app); 6  7 // Require chai and if you want to test promises you can 8 // make it use &#39;chai-as-promised&#39; or if you want to use chai&#39;s &#39;should&#39; 9 var chai = require(&#39;chai&#39;);10 var chaiAsPromised = require(&#39;chai-as-promised&#39;);11 12 chai.should();13 chai.use(chaiAsPromised);14 15 describe(&#39;This is a test suite&#39;, function(){16     17     // has similar &#39;after&#39; method18     before(function(done){19         // happens before the test suite runs20     });21     22     // has similar &#39;afterEach&#39; method23     beforeEach(function(done){24         // happens before each test25     });26 27     it(&#39;should be a test&#39;, function(done){28         // use chai/supertest here29     });30 31     it(&#39;should be another test&#39;, function(done){32         // use chai/supertest here33     });34 });Step 6 1 // ### in test/myTest.js ### 2  3 // A test would look like this 4 it(&#39;should not find the page (using supertest-as-promised)&#39;, function(done){ 5     agent 6         .get(&#39;/gbeqwigbq&#39;) 7         .expect(404) 8         .then(function(res){ 9             &quot;works&quot;.should.equal(&quot;works&quot;);10             &quot;not works&quot;.should.not.equal(&quot;works&quot;);11         })12         .done(done);  // remember to call done13 });", "date" : "February 14, 2015" },
  
    "/javascript/2015/02/14/learn-node-part-5-mongoose": {  "id": "/javascript/2015/02/14/learn-node-part-5-mongoose", "title": "Learn Node Part 5: Mongoose", "category": "javascript", "tags": "nodejs mongodb mongoose", "content" :"OverviewOne of the most popular NoSQL databases is MongoDB. It’s great to use with node for any project and npm has a great module called mongoose to make things even easier.You can find more information here.InstallationStep 1 1 ### in the command line ### 2  3 # install mongodb using homebrew 4 brew install mongodb 5  6 # start up mongodb 7 mongod 8  9 # query mongodb10 mongo11 12 # install mongoose13 npm install --save mongooseStep 2 1 // ### in app.js ### 2 ... 3  4 // Mongoose connecting 5 //--------------------------------------------- 6 var mongoose = require(&#39;mongoose&#39;); 7 mongoose.connect(&#39;mongodb://localhost/test&#39;);// &quot;test&quot; is the db name 8 mongoose.connection.on(&#39;error&#39;, function() { 9   console.error(&#39;✗ MongoDB Connection Error. Please make sure MongoDB is running.&#39;);10 });11 12 // add ^ before this line13 var app = express();14 15 ...Step 3 1 // ### in model/testModel.js ### 2  3 var mongoose = require(&#39;mongoose&#39;); 4  5 var testModelSchema = mongoose.Schema({ 6     // look at mongoose/mongo api to know what&#39;s allowed 7     name: String, 8 }); 9 10 //add custom methods to the model if you want11 testModelSchema.statics.customFunctionName = function(){12 }13 14 // Create the model and assign it to exports15 module.exports = mongoose.model(&#39;testModel&#39;, testModelSchema, &#39;testModel&#39;);Step 4 1 // Now you can require the model 2 var testModel = require(&quot;./model/testModel&quot;); 3  4 // and use mongoose functions on it 5 testModel.find({}, function(err, testModels){ 6     console.log(&quot;Found this many&quot;, testModels.length); 7 }); 8  9 // or custom functions10 testModelSchema.customFunctionName();", "date" : "February 14, 2015" },
  
    "/javascript/2015/02/14/learn-node-part-4-angular-minification": {  "id": "/javascript/2015/02/14/learn-node-part-4-angular-minification", "title": "Learn Node Part 4: Angular Minification", "category": "javascript", "tags": "nodejs angularjs minification", "content" :"OverviewAngularjs is a great framework. The problem is that minification is a bit more complicated because of angular’s dependency injection. This project shows how you can minify an angular app.You can find more information here.InstallationStep 11 ### Command Line ###2 3 # Get the dependencies4 npm install -g grunt-cli5 6 npm install --save-dev load-grunt-tasks7 npm install --save-dev grunt-contrib-clean8 npm install --save-dev grunt-contrib-uglifyStep 21 // ### in public/javascripts/index.js ###2 3 // Make sure that your angular syntax is like this4 MyApp.controller(&quot;ThingController&quot;, [&quot;$scope&quot;,5     function($scope){6         $scope.something = &quot;Minification of angular apps works!&quot;;7     }8 ]);Step 3 1 // ### in Gruntfile.js ### 2 &quot;use strict&quot;; 3  4 module.exports = function(grunt){ 5     require(&#39;load-grunt-tasks&#39;)(grunt); 6  7     grunt.initConfig({ 8         clean: { 9             build: {10                 src: [&quot;public/javascripts/index.min.js&quot;]11             }12         },// End clean13         14         uglify: {15             options: {16                 mangle: {17                     toplevel: true18                 },19                 compress: true20             },21             my_target: {22                 files: {23                     &#39;public/javascripts/index.min.js&#39;: [&quot;public/javascripts/index.js&quot;]24                 }25             }26         },// End uglify27     });28 29     grunt.registerTask(&quot;default&quot;, [&quot;clean&quot;, &quot;uglify&quot;]);30 };Step 41 ### Command Line ###2 $ grunt", "date" : "February 14, 2015" },
  
    "/javascript/2015/02/14/learn-node-part-3-grunt": {  "id": "/javascript/2015/02/14/learn-node-part-3-grunt", "title": "Learn Node Part 3: Grunt", "category": "javascript", "tags": "nodejs npm grunt", "content" :"OverviewGrunt is amazing! It automates tasks for you in the most amazing way. It allows you to run tests, minify css/js files, combine js files and much much more.In this project, I used 2 js files index.js and index2.js. I concatinated them and saved the result to built.js and then I uglified that file and saved the result to built.min.js. I also minimized the css using cssmin.You can find more information here.InstallationStep 1 1 ### Terminal ### 2  3 # Get the right packages 4 npm install -g grunt-cli 5  6 npm install --save-dev load-grunt-tasks 7 npm install --save-dev grunt-contrib-uglify 8 npm install --save-dev grunt-contrib-clean 9 npm install --save-dev grunt-contrib-concat10 npm install --save-dev grunt-contrib-cssminStep 21 ### Command Line ###2 3 # Create a Gruntfile.js4 touch Gruntfile.jsStep 3 1 // ### in Gruntfile.js ### 2  3 module.exports = function(grunt) { 4  5   require(&#39;load-grunt-tasks&#39;)(grunt); 6   grunt.initConfig({ 7     // ########## your tasks go here ############## 8   }); 9   10   // now &quot;grunt taskname&quot; will run concat, uglify, some-other-task in that order11   grunt.registerTask(&#39;taskname&#39;, [&#39;concat&#39;, &#39;uglify&#39;, &#39;some-other-task&#39;]);12 };Step 4 1 // ### in Gruntfile.js ### 2  3 // The initConfig would look something like this 4 grunt.initConfig({ 5   concat: { 6       dist: { 7           src: [&#39;public/javascripts/*.js&#39;], 8           dest: &#39;public/javascripts/built.js&#39;, 9       },10   },// End concat11   clean: {12       build: {13           src: [&quot;public/javascripts/built.js&quot;, &quot;public/javascripts/built.min.js&quot;]14       }15   },// End clean16   uglify: {17       options: {18           mangle: {19               toplevel: true20           },21           compress: true22       },23       my_target: {24           files: {25               &#39;public/javascripts/built.min.js&#39;: [&quot;public/javascripts/built.js&quot;]26           }27       }28   },// End uglify29   cssmin: {30       options: {31         files: [{32             expand: true,33             cwd: &#39;public/stylesheets/&#39;,34             src: [&#39;style.css&#39;],35             dest: &#39;public/stylesheets/&#39;,36             ext: &#39;.min.css&#39;37         }]38       }39   }// End cssmin40 });", "date" : "February 14, 2015" },
  
    "/javascript/2015/02/14/learn-node-part-2-less": {  "id": "/javascript/2015/02/14/learn-node-part-2-less", "title": "Learn Node Part 2: Less", "category": "javascript", "tags": "nodejs less npm express", "content" :"OverviewCss is awesome, but it has a lot of limitations. For example, lets say that you have 1 color that you place everywhere (brand color). If you wanted to change this color, you would either go through each css file looking for it with control+f/cmd+f or you would do a find and replace. That’s very inefficient. Less allows you to code css like a programming language. How does it work?You can find more information here. 1 @myColor: blue; 2 body { 3   color:red; 4   h2 { 5     color: @myColor; 6      7     &amp;:hover { 8       text-align:center; 9     }10   }11   p {12     background-color: @myColor;13   }14 }15 16 /* Compiles to */17 18 body {19   color:red;20 }21 body h2 {22   color: blue;23 }24 body h2:hover {25   text-align:center;26 }27 body p {28   background-color: blue;29 }Installation1 # To install less in your express app2 npm install less-middleware1 // inside your app.js2 var lessMiddleware = require(&#39;less-middleware&#39;);3 app.use(lessMiddleware(__dirname + &#39;/public&#39;));4 // this order is important5 app.use(express.static(__dirname + &#39;/public&#39;));6 7 // Now when you create .less files, a matching .css file gets created when you save8 // So you can add the link to that css file in your html like you normally would and voila9 // example in this project folder as usual.", "date" : "February 14, 2015" },
  
    "/javascript/2015/02/14/learn-node-part-12-react-more": {  "id": "/javascript/2015/02/14/learn-node-part-12-react-more", "title": "Learn Node Part 12: React More", "category": "javascript", "tags": "nodejs expressjs react components", "content" :"OverviewIf you haven’t already, look at how to initialize React here. You can find more information here.React works with reusable components. They are similar to AngularJS directives in a way. We’re going to be creating a person list. 1 // ### in first.jsx ### 2  3 /** @jsx React.DOM */ 4 &quot;use strict&quot;; 5  6 var data = [ 7   {first:&quot;Vush&quot;, last: &quot;Ky&quot;}, 8   {first:&quot;Dai&quot;, last: &quot;Sy&quot;}, 9   {first:&quot;Ja&quot;, last: &quot;Ky&quot;}10 ];11 12 var Person = React.createClass({13   render: function(){14     return (15       &lt;div&gt;16         &lt;h2&gt;{this.props.last}, {this.props.first}&lt;/h2&gt;17       &lt;/div&gt;18     )19   }20 });// End Person21 22 23 var PersonList = React.createClass({24   render: function(){25     var people = this.props.data.map(function(person){26       return &lt;Person first={person.first} last={person.last} /&gt;27     });// End People28 29     return (30       &lt;div&gt;31         {people}32       &lt;/div&gt;33     );34   }35 });// End PersonList36 37 38 var PersonApp = React.createClass({39   render: function(){40     return (41       &lt;div&gt;42         &lt;h1&gt;This is the person App&lt;/h1&gt;43         &lt;PersonList data={this.props.data} /&gt;44       &lt;/div&gt;45     );46   }47 });// End PersonApp48 49 50 React.renderComponent(&lt;PersonApp data={data} /&gt;, document.getElementById(&#39;first&#39;));We created a PersonApp which has data. The PersonApp then creates a PersonList which displays a Person for every object in the data array. React uses this.props to access attributes on the component (like first, last and data). Lets remove data because it’s static. 1 // ### in first.jsx ### 2  3 // first remove the data array. 4 // Person doesn&#39;t change 5 // PersonList doesn&#39;t change 6  7  8 var PersonApp = React.createClass({ 9   getInitialState: function(){10     return { data: [], first:&quot;&quot;, last:&quot;&quot; };11   },12 13   render: function(){14     return (15       &lt;div&gt;16         &lt;h1&gt;This is the person App&lt;/h1&gt;17         &lt;form&gt;18           &lt;input type=&quot;text&quot; value={this.state.first} /&gt;19           &lt;input type=&quot;text&quot; value={this.state.last} /&gt;20           &lt;button type=&quot;submit&quot;&gt;Add&lt;/button&gt;21         &lt;/form&gt;22 23         &lt;PersonList data={this.state.data} /&gt;24       &lt;/div&gt;25     );26   }27 });// End PersonApp28 29 // notice we removed data on this line30 React.renderComponent(&lt;PersonApp /&gt;, document.getElementById(&#39;first&#39;));It looks good but it would be nice to change the state of first and last when their associated input changes. 1 // ### in first.jsx ### 2  3 var PersonApp = React.createClass({ 4   getInitialState: function(){ 5     return { data: [], first:&quot;&quot;, last:&quot;&quot; }; 6   }, 7   onChangeFirst: function(e){ 8     this.setState({first: e.target.value}); 9   },10   onChangeLast: function(e){11     this.setState({last: e.target.value});12   },13 14   render: function(){15     return (16       &lt;div&gt;17         &lt;h1&gt;This is the person App&lt;/h1&gt;18         &lt;form&gt;19           &lt;input type=&quot;text&quot; value={this.state.first} onChange={this.onChangeFirst} /&gt;20           &lt;input type=&quot;text&quot; value={this.state.last} onChange={this.onChangeLast} /&gt;21         &lt;/form&gt;22 23         &lt;PersonList data={this.state.data} /&gt;24       &lt;/div&gt;25     );26   }27 });// End PersonAppThe state changes but we’re not modifying the data array inside the state. We want to add the new person object to the array. We’re going to accomplish this by adding an onSubmit event and handler to PersonApp. 1 // ### in first.jsx ### 2  3 var PersonApp = React.createClass({ 4   getInitialState: function(){ 5     return { data: [], first:&quot;&quot;, last:&quot;&quot; }; 6   }, 7   onChangeFirst: function(e){ 8     this.setState({first: e.target.value}); 9   },10   onChangeLast: function(e){11     this.setState({last: e.target.value});12   },13   handleSubmit: function(e){14     e.preventDefault();15     this.state.data.push({ first:this.state.first, last:this.state.last});16     this.setState({first:&#39;&#39;, last:&#39;&#39;});17   },18 19   render: function(){20     return (21       &lt;div&gt;22         &lt;h1&gt;This is the person App&lt;/h1&gt;23         &lt;form onSubmit={this.handleSubmit}&gt;24           &lt;input type=&quot;text&quot; value={this.state.first} onChange={this.onChangeFirst} /&gt;25           &lt;input type=&quot;text&quot; value={this.state.last} onChange={this.onChangeLast} /&gt;26           &lt;button type=&quot;submit&quot;&gt;Add&lt;/button&gt;27         &lt;/form&gt;28 29         &lt;PersonList data={this.state.data} /&gt;30       &lt;/div&gt;31     );32   }33 });// End PersonApp", "date" : "February 14, 2015" },
  
    "/javascript/2015/02/14/learn-node-part-11-basic-react": {  "id": "/javascript/2015/02/14/learn-node-part-11-basic-react", "title": "Learn Node Part 11: Basic React", "category": "javascript", "tags": "nodejs express react bower", "content" :"OverviewI’ve heard some nice things about Facebook’s ReactJS Framework. So here’s how to setup React with Node. You can find more information here1 ### in shell ###2 3 # look at my bower tutorial on how to setup bower4 $ npm install --save bower5 6 $ npm install --save express-jsx7 $ bower install --save reactReact’s syntax is really verbose, so they use JSX. Manually compiling jsx is a pain so we’re going to use express-jsx which compiles the jsx in real time. Lets start.1 // ### in app.js ###2 3 // add near the top4 var jsxCompile = require(&#39;express-jsx&#39;);5 6 // order is important7 app.use(jsxCompile(path.join(__dirname, &#39;public&#39;)));8 app.use(express.static(path.join(__dirname, &#39;public&#39;)));Now we’re going to modify the ejs file and make it use react.1 &lt;!-- ### in index.ejs ### --&gt;2 3 &lt;div id=&quot;test&quot;&gt;&lt;/div&gt;4 5 &lt;script type=&quot;text/javascript&quot; src=&quot;bower_components/react/react.min.js&quot;&gt;&lt;/script&gt;6 &lt;script src=&quot;javascripts/test.js&quot;&gt;&lt;/script&gt;Remember that when test.js is requested, express-jsx middleware will look for a matching .jsx file. This means we need a test.jsx file.1 // ### in test.jsx ###2 3 /** @jsx React.DOM */4 &quot;use strict&quot;5 6 React.renderComponent(7   &lt;h1&gt;I am printing the title from react, works!&lt;/h1&gt;,8   document.getElementById(&#39;test&#39;)9 );", "date" : "February 14, 2015" },
  
    "/javascript/2015/02/14/learn-node-part-10-angularjs": {  "id": "/javascript/2015/02/14/learn-node-part-10-angularjs", "title": "Learn Node Part 10: AngularJS", "category": "javascript", "tags": "nodejs angularjs bower", "content" :"OverviewAngularJS is amazing but I realized that I don’t actually have a guide on how to use it from scratch… So here we go.You can find more information hereInstallation1 ### in shell ###2 express -e 3 npm install -g bower4 touch .bowerrc5 touch bower.json 1 // in .bowerrc 2 { 3   //where do you want the bower components to be stored 4   &quot;directory&quot; : &quot;public/bower_components&quot; 5 } 6  7 // in bower.json 8 { 9   &quot;name&quot;: &quot;Server17Angular&quot;,10   &quot;version&quot;: &quot;0.0.1&quot;,11   &quot;dependencies&quot;: {12   }13 }Install angular and it’s dependencies1 bower install --save angular2 bower install --save angular-routeWe add the files to the ejs view… add them in the head tag or at the end of the body tag. We also add the ng-app attribute to the body (or anywhere else) and the ng-view attribute to allow us to use partials.1 &lt;!-- ### in views/index.ejs ### --&gt;2 &lt;head&gt;3   &lt;script type=&quot;text/javascript&quot; src=&quot;/bower_components/angular/angular.min.js&quot;&gt;&lt;/script&gt;4   &lt;script type=&quot;text/javascript&quot; src=&quot;/bower_components/angular-route/angular-route.min.js&quot;&gt;&lt;/script&gt;5   &lt;script type=&quot;text/javascript&quot; src=&quot;/javascripts/index.js&quot;&gt;&lt;/script&gt;6 &lt;/head&gt;7 &lt;body ng-app=&quot;MyApp&quot;&gt;8   &lt;div ng-view=&quot;&quot;&gt;&lt;/div&gt;9 &lt;/body&gt;We now need to start our angular app in javascript. 1 // ### in public/javascripts/index.js ### 2  3 // create angular app 4 var MyApp = angular.module(&quot;MyApp&quot;, [&quot;ngRoute&quot;]); 5  6 // Add routes 7 MyApp.config([&quot;$routeProvider&quot;, &quot;$locationProvider&quot;, 8   function($routeProvider, $locationProvider) { 9     $routeProvider10       11       .when(&quot;/&quot;, {12         templateUrl: &quot;partials/home.html&quot;,13         controller: &quot;homeCtrl&quot;14       })15       16       .otherwise({17         redirectTo: &quot;/&quot;18       });19 20     $locationProvider.html5Mode(true);21   }22 ]);23 24 // add controllersWe now need to add controllers that will handle what happens when someone goes to one of those routes1 // ### in public/javascripts/index.js ###2 3 //at the bottom of the file add...4 MyApp.controller(&quot;homeCtrl&quot;, [&quot;$scope&quot;, function($scope) {5   // do stuff6 }]);Ok we have everything set up, but we don’t have a partial to display, what’s in home.html?1 &lt;!-- ### in public/partials/home.html ### --&gt;2 3 &lt;p&gt;This is the home partial that will display for the home route &#39;/&#39;&lt;/p&gt;Done!", "date" : "February 14, 2015" },
  
    "/javascript/2015/02/14/learn-node-part-1-bower": {  "id": "/javascript/2015/02/14/learn-node-part-1-bower", "title": "Learn Node Part 1: Bower", "category": "javascript", "tags": "nodejs bowerjs npm", "content" :"OverviewNodeJS has the amazing npm, which is one of my favorite package managers. It handles all your modulesneatly inside the package.json file. This is great for the server side, but what about the client side?That’s where bower comes in handy. BowerJS manages your client side dependencies. Everything from jQuery, AngularJS and bootstrap can all be easily installed with bower. You can find more information here.1 # once you install npm ... first, in your command line2 $ npm install -g bower3 $ touch .bowerrc4 $ touch bower.json 1 // in .bowerrc 2 { 3   //where do you want the bower components to be stored 4   &quot;directory&quot; : &quot;public/bower_components&quot; 5 } 6  7 // in bower.json 8 { 9   &quot;name&quot;: &quot;Server1&quot;,10   &quot;version&quot;: &quot;0.0.1&quot;,11   &quot;dependencies&quot;: {12   }13 }After that, you can simply add components by doing the following in your command line.1 bower install jquery", "date" : "February 14, 2015" },
  
    "/javascript/2015/02/14/express-3-vs-express-4": {  "id": "/javascript/2015/02/14/express-3-vs-express-4", "title": "Express 3 vs Express 4", "category": "javascript", "tags": "expressjs nodejs web", "content" :"OverviewThis post is all about the differences between Express v3 and v4. You can find more information herePackage.json and server.jsA lot of middleware was removed and placed into their own modules so that they can get worked on without impacting Express. I’ll show you how you used to make an Express server in v3 and how you make one in v4.Express 31 // package.json (Express 3.0)2 {3   &quot;name&quot;: &quot;old-express&quot;,4   &quot;main&quot;: &quot;server.js&quot;,5   &quot;dependencies&quot;: {6     &quot;express&quot;: &quot;~3.4.8&quot;7   }8 } 1 // server.js (Express 3.0) 2 var express = require(&#39;express&#39;); 3 var app     = express(); 4  5 app.configure(function() { 6     app.use(express.static(__dirname + &#39;/public&#39;));   // set the static files location 7     app.use(express.logger(&#39;dev&#39;));                   // log every request to the console 8     app.use(express.bodyParser());                    // pull information from html in POST 9     app.use(express.methodOverride());                // simulate DELETE and PUT10 });11 12 app.listen(3000);   13 console.log(&#39;Server started on port 3000&#39;);           // notify userHere’s a list of middleWare that was turned into separate modules.            Express 3.0 Name      Express 4.0 Name                  bodyParser      body-parser              compress      compression              cookieSession      cookie-session              logger      morgan              cookieParser      cookie-parser              session      express-session              favicon      static-favicon              response-time      response-time              error-handler      errorhandler              method-override      method-override              timeout      connect-timeout              vhost      vhost              csrf      csurf      Express 4 1 // package.json (Express 4.0) 2 { 3   &quot;name&quot;: &quot;new-express&quot;, 4   &quot;main&quot;: &quot;server.js&quot;, 5   &quot;dependencies&quot;: { 6     &quot;express&quot;: &quot;~4.0.0&quot;, 7     &quot;morgan&quot;: &quot;~1.0.0&quot;, 8     &quot;body-parser&quot;: &quot;~1.0.0&quot;, 9     &quot;method-override&quot;: &quot;~1.0.0&quot;10   }11 } 1 // server.js (Express 4.0) 2 var express        = require(&#39;express&#39;); 3 var morgan         = require(&#39;morgan&#39;); 4 var bodyParser     = require(&#39;body-parser&#39;); 5 var methodOverride = require(&#39;method-override&#39;); 6 var app            = express(); 7  8 app.use(express.static(__dirname + &#39;/public&#39;));     // set the static files location 9 app.use(morgan(&#39;dev&#39;));                             // log every request to the console10 app.use(bodyParser.urlencoded({ extended: false }));// parse application/x-www-form-urlencoded11 app.use(bodyParser.json());                         // parse application/json12 app.use(methodOverride());                          // simulate DELETE and PUT13 14 app.listen(3000);   15 console.log(&#39;Server started on port 3000&#39;);         // shoutout to the userRoutesExpress 31 // (Express 3.0)2 app.get(&#39;/dogs&#39;, function(req, res, next) {3     // do stuff4 });5 6 app.post(&#39;/dogs&#39;, function(req, res, next) {7     // do stuff 8 });Express 41 // (Express 4.0)2 app.route(&#39;/dogs&#39;)3     .get(function(req, res, next) {4         // do stuff 5     })6     .post(function(req, res, next) {7         // do stuff 8     });", "date" : "February 14, 2015" },
  
    "/javascript/2015/02/13/learn-react-part-6-using-node": {  "id": "/javascript/2015/02/13/learn-react-part-6-using-node", "title": "Learn React Part 6: using Node", "category": "javascript", "tags": "react nodejs browserify reactify watchify less express", "content" :"EDITThis is the old way of using Browserify with React and Node. To see the new version, look at Using React with Grunt and Browserify.OverviewWe’re going to set up a React server using browserify, EJS, Express and Less.Install1 ### in terminal ###2 npm install -g express@3.4.83 express -e -c less4 npm installOn line 2, we set the express version to 3.4.8. This is because the express generator for later versions is horrible. On line 3, we set the template engine to EJS using -e and the css engine to less using -c less.Next, we’re going to install all our fun modules.1 ### in terminal ###2 npm install --save browserify reactify socket.io uglify-jsYou can find out more about each module or try to look it up on this site. This is what your package.json should look like. 1 { 2   &quot;name&quot;: &quot;application-name&quot;, 3   &quot;version&quot;: &quot;0.0.1&quot;, 4   &quot;private&quot;: true, 5   &quot;scripts&quot;: { 6     &quot;watch&quot;: &quot;watchify client.js -o public/javascripts/build.min.js -v&quot;, 7     &quot;browserify&quot;: &quot;browserify client.js | uglifyjs &gt; public/javascripts/build.min.js&quot;, 8     &quot;build&quot;: &quot;npm run browserify&quot;, 9     &quot;start&quot;: &quot;npm run watch &amp; nodemon app.js&quot;10   },11   &quot;dependencies&quot;: {12     &quot;express&quot;: &quot;3.4.8&quot;,13     &quot;ejs&quot;: &quot;*&quot;,14     &quot;less-middleware&quot;: &quot;*&quot;,15     &quot;browserify&quot;: &quot;~8.1.3&quot;,16     &quot;reactify&quot;: &quot;~1.0.0&quot;,17     &quot;socket.io&quot;: &quot;~1.3.4&quot;,18     &quot;uglify-js&quot;: &quot;~2.4.16&quot;,19     &quot;watchify&quot;: &quot;~2.3.0&quot;,20     &quot;react&quot;: &quot;~0.12.2&quot;21   },22   &quot;browserify&quot;: {23     &quot;transform&quot;: [24       [25         &quot;reactify&quot;26       ]27     ]28   }29 }npm run watch – Running this command starts a watchify watch, so when we edit our js files, they get browserified on save.npm run build – Running this command builds our build.min.js and minifies it for productionnpm start – Running this command sets up a watch and runs our app via nodemonSetupNow that we have everything we need, we have to set up react. Lets set up ./views/index.ejs. 1 &lt;!DOCTYPE html&gt; 2 &lt;html&gt; 3   &lt;head&gt; 4     &lt;title&gt;MyApp&lt;/title&gt; 5     &lt;link rel=&#39;stylesheet&#39; href=&#39;/stylesheets/style.css&#39; /&gt; 6   &lt;/head&gt; 7   &lt;body&gt; 8     &lt;h1&gt;MyApp&lt;/h1&gt; 9     &lt;section id=&quot;my-app&quot;&gt;&lt;/section&gt;10     &lt;script type=&quot;text/javascript&quot; src=&quot;/javascripts/build.min.js&quot;&gt;&lt;/script&gt;11   &lt;/body&gt;12 &lt;/html&gt;Next we have to setup ./client.js that will be transformed into build.min.js.1 /** @jsx React.DOM */2 3 var React = require(&#39;react&#39;);4 var MyApp = require(&#39;./components/MyApp.react&#39;);5 React.render(&lt;MyApp /&gt;, document.getElementById(&#39;my-app&#39;));We’re still missing our MyApp component. Let’s build it. 1 /** @jsx React.DOM */ 2  3 var React = require(&#39;react&#39;); 4 module.exports = MyApp = React.createClass({ 5   render: function(){ 6     return ( 7       &lt;h1&gt;Hello from the MyApp component&lt;/h1&gt; 8     ) 9   }10 });", "date" : "February 13, 2015" },
  
    "/java/2015/02/07/java-to-remember": {  "id": "/java/2015/02/07/java-to-remember", "title": "Java To Remember", "category": "java", "tags": "string tree graph sorting bit manipulation regex hashmap socket file", "content" :"OverviewThis post is a little different. I’m going to be turning my JavaToRemember Repo into a post so that it’s easier to search. You can find more the old README.md here.Credits to source article here…Table of content  String  Linked List  Tree  Graph  Sorting  Recursion and iteration  Dynamic Programming  Bit Manipulation  Probability  Combinations and Permutations  Files  Sockets  Regex  Formatting  HashMap  HashSet  Deque1. String 1 &quot;Hello&quot;.toCharArray()             // [&#39;H&#39;, &#39;e&#39;, &#39;l&#39;, &#39;l&#39;, &#39;o&#39;] 2 Collections.sort(List lst)        // sorts a List in place 3 Arrays.sort(T[] array)            // sort an array 4 Collections.reverse(List lst)     // reverses a LIST 5  6 Arrays.toString(char[] a)         // convert to string 7 &quot;Hello&quot;.charAt(int x)             // get a char at the specific index 8 &quot;Hello&quot;.length()                  // string length 9 [1,2,3,4,5].length                // array size10 11 Character.isLetter(&#39;a&#39;)           // true12 Character.isDigit(5)              // true13 Character.isLetterOrDigit(&#39;a&#39;)    // true14 Character.isWhiteSpace(&#39; &#39;)       // true15 16 Character.toLowerCase(&#39;A&#39;)        // &#39;a&#39;17 Character.isUpperCase(&#39;a&#39;)        // false18 19 &quot;abcdef&quot;.substring(1, 2)          // &quot;b&quot;20 &quot;abcdef&quot;.substring(1, 5)          // &quot;bcde&quot;21 &quot;abcdef&quot;.substring(3)             // &quot;def&quot;2. Linked ListThe node class which is the “element” of a linked list1 class Node {2   int val;3   Node next;4   5   Node(int x) {6     val = x;      //value7     next = null;  //next element8   }9 }Stack implementation using the Linked List data structure 1 class Stack{ 2   Node top;  3    4   /** 5    *  Default constructor 6    */ 7   public Stack(){}     8    9 10   /**11    *  Method that returns top node12    *  without removing it13    */14   public Node peek(){15     if(top != null){16       return top;17     }18     return null;19   }20   21   /**22    *  Method used to remove and23    *  return top node24    */25   public Node pop(){26     if(top == null){27       return null;28     } else {29       Node temp = new Node(top.val);30       top = top.next;31       return temp;  32     }33   }34   35   /** 36    *  Method to add Node37    *  to the top of the Stack38    */39   public void push(Node n){40     if(n != null){41       n.next = top;42       top = n;43     }44   }45 }Queue implementation using the Linked List data structure 1 class Queue { 2   Node first, last; 3    4   /** 5    *  Push an element to the back 6    *  of the queue 7    */ 8   public void enqueue(Node n){ 9     if(first == null){10       first = n;11       last = first;12     } else {13       last.next = n;14       last = n;15     }16   }17  18   /**19    *  Remove element at the front20    */21   public Node dequeue(){22     if(first == null){23       return null;24     } else {25       Node temp = new Node(first.val);26       first = first.next;27       return temp;28     } 29   }30 }3. TreeThe tree class here is for the binary tree1 class TreeNode {2   int value;3   TreeNode parent;4   TreeNode left;5   TreeNode right;6 }  Binary Search Tree: for all nodes, left children &lt;= current node &lt;= right children  Balanced vs. Unbalanced: In a balanced tree, the depth of the sibling tree’s can differ max by 1  Full Binary Tree: every node other than the leaves has two children.  Perfect Binary Tree: a full binary tree + all leaves same depth + parents have 2 children  Complete Binary Tree: a binary tree with only last lvl possibly incomplete. We add to lowest lvl and right most4. GraphGraphs are used for many things, such as Networking and games.The 2 most famous algorithms for graphs are Depth First Search and Breath First SearchGraphNode 1 class GraphNode{  2   int val; 3   GraphNode next; 4   GraphNode[] neighbors; 5   boolean visited; 6   7   /** 8    *  Constructor with value 9    */10   GraphNode(int x) {11     val = x;12   }13   14   /**15    *  Constructor with value16    *  and with neightbors17    */18   GraphNode(int x, GraphNode[] n){19     val = x;20     neighbors = n;21   }22  23   /**24    *  toString method25    */26   public String toString(){27     return &quot;value: &quot;+ this.val; 28   }29 }Breath First Search (live implementation from MIT here) 1 public static Node bfs(Node root, int value) { 2   // Queue is abstract, use an implementation of queue 3   Queue&lt;Node&gt; q = new Queue&lt;Node&gt;(); 4   Node returnValue; 5   q.enqueue(root); 6    7   while (!q.isEmpty()) { 8     Node temp = q.dequeue(); 9     if (temp.value == value) {10       returnValue = temp;11       break;12     }13     for (Node adj : temp.adjecent) {14       q.enqueue(adj);15     }16   }17   return returnValue;18 }Depth First Search (live implementation from MIT here) 1 public static Node dfs(Node root, int value) { 2   Stack&lt;Node&gt; s = new Stack&lt;Node&gt;(); 3   Node returnValue; 4   s.push(root); 5    6   while (!q.isEmpty()) { 7     Node temp = s.pop(); 8     if (temp.value == value) { 9       returnValue = temp;10       break;11     }12     for (Node adj : temp.adjecent) {13       s.push(adj);14     }15   }16   return returnValue;17 }5. SortingHere is a table of comparison sorting algorithms and their time complexity            Algorithm      Average Time      Worst Time      Space      Comments                  Bubble sort      n^2      n^2      1      It’s easy to implement              Insertion sort      m^2      n^2                            Selection sort      n^2      n^2                            Heap sort      nlogn      nlogn                            Merge sort      nlogn      nlogn      a lot                     Quick sort      nlogn      n^2             In practice, is fastest      Here is a table of algorithms that do not use comparison            Algorithm      Average Time      Worst Time      Space      Comments                  Bucket sort      n      n + N             n is the range of keys, N is size of array              Radix sort      n      m(n + N)             m is the number of keys      6. Recursion and IterationRecursion is easy to understand and implement. However, it's worse than iteration and can cause stackoverflowsFibonacci using bad recursion1 public static int fib(int n){2   if(n &lt;= 1)3     return n;         //base case4   else5     return fib(n-1) + fib(n-2); //recursive case6 }Fibonacci using tail recursion 1 public static int fibHelper(int start, int end, int prev, int current){ 2   if(start == end) 3     return current; 4   else 5     return fibHelper(++start, end, current, current + prev); 6 } 7  8 public static int fib(int n){ 9   if(n &lt;= 1)10     return n;11   else 12     return fibHelper(1,n,0,1);13 }Fibonacci using iteration 1 public static int fib(int n) { 2   if (n &lt;= 1){ 3     return n; 4   } 5   int current = 1; 6   int prev = 0; 7   int temp = 0; 8   9   for (int i = 2; i &lt;= n; i++) {10     temp = current + prev;  //compute fib at pos n11     prev = current;     //old current is now prev12     current = temp;     //current is temp13   }14   return current;15 }7. Dynamic programmingDynamic programming is a technique for solving problems with the following properties:  An instance is solved using the solutions for smaller instances.  The solution for a smaller instance might be needed multiple times.  The solutions to smaller instances are stored in a table, so that each smaller instance is solved only once.  Additional space is used to save time.The problem of climbing steps perfectly fit those 4 properties. Therefore, it can be solve by using dynamic programming. 1 public static int[] Steps = new int[100]; 2   3 public static int f3(int n) { 4   if (n &lt;= 2) 5     A[n]= n; 6   7   if (A[n] &gt; 0) 8       return A[n]; 9   else10       A[n] = f3(n-1) + f3(n-2); //store results so only calculate once!11   return A[n];12 }8. Bit ManipulationBit operators            Operation name      Java symbol      Example      Result      Explanation                  AND      &amp;      7 &amp; 5      5      111 &amp; 101 = 101              OR      |      8 | 3      11      1000 | 0011 = 1011              XOR      ^      15 ^ 5      10      1111 ^ 0101 = 1010              Right Shift      »      7 » 1      3      111 » 1 = 011              Not      ~      ~0      -1      ~000 = 111 which is 2’s complement -1      9. ProbabilityThere are 50 people in a room, what’s the probability that two people have the same birthday? (Ignoring the fact of leap year, i.e., 365 day every year) 1 public static double caculateProbability(int n){ 2   double x = 1;  3   4   for (int i=0; i&lt;n; i++) { 5     x *=  (365.0-i)/365.0; 6   } 7   8   double pro = Math.round((1-x) * 100); 9   return pro/100;10 }10. Combinations and Permutations  If the order doesn’t matter, it is a Combination… 1234 same as 4321  If the order matters, it is a Permutation… 1234 != 2134Permutation 1 public static void perm(int[] list, int pos){ 2   if (pos == list.length) { 3     System.out.println( Arrays.toString(list) ); 4   } else { 5     for(int i=pos; i &lt; list.length; ++i){ 6       swap(list, i, pos); 7       perm(list, pos + 1); 8       swap(list, i, pos); 9     }10   }11 }12 13 public static final &lt;T&gt; void swap (T[] a, int i, int j) {14   T t = a[i];15   a[i] = a[j];16   a[j] = t;17 }11. FilesWriting to a file. 1 //java7... appends to file 2 try(Formatter f = new Formatter(&quot;myText.txt&quot;)) { 3   f.format(&quot;this is output text&quot;, null); 4 } catch(IOException ioe){ 5   ioe.printStackTrace(); 6 } 7  8 //older java 9 Formatter f;10 try {11   f = new Formatter(&quot;myText.txt&quot;);12   f.format(&quot;this is output text&quot;, null);13 } catch(IOException ioe){14   ioe.printStackTrace();15 } finally {16   f.close();17 }Reading from a file1 //read all the lines in a file2 try(Scanner scan = new Scanner(new File(&quot;myText.txt&quot;) ) ){3   ArrayList&lt;String&gt; x = new ArrayList&lt;String&gt;();4   while(scan.hasNext()){5     x.add(scan.nextLine());6   }7 } catch (FileNotFoundException e) {8   e.printStackTrace();9 }12. SocketsServer that listens for a connection, writes the date and closes connection 1 //Server 2 ServerSocket listener = new ServerSocket(9090); 3 try { 4     while (true) { 5         Socket socket = listener.accept(); 6         try { 7             ObjectOutputStream out = 8                 new ObjectOutputStream(socket.getOutputStream()); 9             out.writeObject(&quot;Hi there&quot;);10         } finally {11             socket.close();12         }13     }14 }15 finally {16     listener.close();17 }18 19 20 //Client the data is sent through serialization21 //to send objects, they must be serializable22 Socket s = new Socket(serverAddress, 9090);23 try{24   ObjectInputStream input = new ObjectInputStream(s.getInputStream());25   String answer = (String)input.readObject();26 } catch(ClassCastException cce){27   cce.printStackTrace();28 } finally {29   s.close();30 }31 32 //On mac, you can open a terminal and write &quot;nc localhost 9090&quot; to connect to server socket13. RegexThe full documentation can be found here Docs1 //Long way, that can be reused2 Pattern p = Pattern.compile(&quot;a*b&quot;);3 Matcher m = p.matcher(&quot;aaaab&quot;);4 boolean b = m.matches();5 6 //shorthand7 boolean b = Pattern.matches(&quot;a*b&quot;, &quot;aaaaab&quot;);Regular-expression constructs      [abc]    a, b, or c (simple class)                  [^abc]              Any character except a, b, or c (negation)                      [a-zA-Z]              a through z or A through Z, inclusive (range)                      [a-d[m-p]]              a through d, or m through p: [a-dm-p] (union)                      [a-z&amp;&amp;[def]]              d, e, or f (intersection)                      [a-z&amp;&amp;[^bc]]              a through z, except for b and c: [ad-z] (subtraction)                      [a-z&amp;&amp;[^m-p]]              a through z, and not m through p: [a-lq-z](subtraction)      Predefined character classes              .              Any character (may or may not match line terminators)                      \d              A digit: [0-9]                      \D              A non-digit: [^0-9]                      \s              A whitespace character: [ \t\n\x0B\f\r]                      \S              A non-whitespace character: [^\s]                      \w              A word character: [a-zA-Z_0-9]                      \W              A non-word character: [^\w]      Greedy quantifiers              X?              X, once or not at all                      X*              X, zero or more times                      X+              X, one or more times                      X{n}              X, exactly n times                      X{n,}              X, at least n times                      X{n,m}              X, at least n but not more than m times      14. FormattingFull article can be found here.Strings      Code    Description        %s    will print the string as it is.        %15s    will print the string as it is. If the string has less than 15 characters, the output will be padded on the left.        %-6s    will print the string as it is. If the string has less than 6 characters, the output will be padded on the left.        %.8s    will print maximum 8 characters of the string.   1 // Padding left 2 System.out.printf(&quot;%10s %10s\n&quot;, &quot;hello&quot;, &quot;world&quot;); 3  4 // Padding right 5 System.out.printf(&quot;%-10s %-10s\n&quot;, &quot;hello&quot;, &quot;world&quot;); 6  7 // As is 8 System.out.printf(&quot;%s %s\n&quot;, &quot;hello&quot;, &quot;world&quot;); 9 10 // Max 2 characters11 System.out.printf(&quot;%.2s %.2s\n&quot;, &quot;hello&quot;, &quot;world&quot;);12 13 /*14      hello      world15 hello      world     16 hello world17 he wo    18 */Integers      Code    Description        %d    will print the integer as it is.        %6d    will print the integer as it is. If the number of digits is less than 6, the output will be padded on the left.        %-6d    will print the integer as it is. If the number of digits is less than 6, the output will be padded on the right.        %06d    will print the integer as it is. If the number of digits is less than 6, the output will be padded on the left with zeroes.   1 // Padding left 2 System.out.printf(&quot;%10d %10d\n&quot;, 12345, 54321); 3  4 // Padding right 5 System.out.printf(&quot;%-10d %-10d\n&quot;, 12345, 54321); 6  7 // As is 8 System.out.printf(&quot;%d %d\n&quot;, 12345, 54321); 9 10 // fill rest of 10 digits with 0s11 System.out.printf(&quot;%010d %010d\n&quot;, 12345, 54321);12 13 /*14      12345      5432115 12345      54321     16 12345 5432117 0000012345 000005432118 */Floats      Code    Description        %f    will print the number as it is.        %15f    will print the number as it is. If the number has less than 15 digits, the output will be padded on the left.        %.8f    will print maximum 8 decimal digits of the number.        %9.4f    will print maximum 4 decimal digits of the number. The output will occupy 9 characters at least. If the number of digits is not enough, it will be padded   1 // Padding left 2 System.out.printf(&quot;%14f %14f\n&quot;, 123.456789, 987.654321); 3  4 // Padding right 5 System.out.printf(&quot;%-14f %-14f\n&quot;, 123.456789, 987.654321); 6  7 // As is 8 System.out.printf(&quot;%f %f\n&quot;, 123.456789, 987.654321); 9 10 // 3 digit Precision + left padding 11 System.out.printf(&quot;%14.3f %14.3f\n&quot;, 123.456789, 987.654321);12 13 /*14     123.456789     987.65432115 123.456789     987.654321    16 123.456789 987.65432117        123.457        987.65418 */15. HashMapHashMaps &amp; HashTables allow inserts, deletes and gets at O(1).HashTables are synchronized while HashMaps are not. HashTables do not allow null keys or values.HashMaps allows 1 null key and unlimited null values.The synchronized HashMap is the ConcurrentHashMap&lt;Key,Value&gt; which is in java.util.concurrent.Source: here 1 Map&lt;String, Integer&gt; map = new HashMap&lt;&gt;(); 2 map.put(&quot;a&quot;, 1); // { a:1 } 3 map.put(&quot;b&quot;, 2); // { a:1, b:2 } 4 map.put(&quot;c&quot;, 3); // { a:1, b:2, c:3 } 5  6 map.get(&quot;a&quot;);    // 1 7 map.containsKey(&quot;d&quot;); // false 8 map.values();    // [1, 2, 3] 9 map.keySet();    // [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]10 map.remove(&quot;a&quot;); // { b:2, c:3 }11 map.clear();     // {}16. HashSetA HashSet is a dictionary that only stores keys. It doesn’t allow for duplicates and only stores keys. 1 Set&lt;Integer&gt; set = new HashSet&lt;&gt;(); 2 set.add(1);       // { 1 } 3 set.add(2);       // { 1, 2 } 4 set.add(3);       // { 1, 2, 3 } 5  6 set.contains(5);  // false 7 set.contains(2);  // true 8 set.remove(2);    // { 1, 3 } 9 10 for(int val: set) {11   System.out.println(val);12 }13 // 114 // 315 16 List&lt;Integer&gt; list = new ArrayList&lt;&gt;(set); // [1,3]17 18 set.clear();      // {}17. DequeDeques implement the interfaces of both Stacks and Queues. They are great for both. 1 Deque&lt;Integer&gt; deque = new ArrayDeque&lt;&gt;(); 2 deque.add(5);         // [5] 3 deque.addFirst(2);    // [2,5] 4 deque.addLast(3);     // [2,5,3] 5  6 deque.getFirst();     // 2 7 deque.getLast();      // 3 8  9 deque.removeFirst();  // 2 [5,3]10 deque.removeLast();   // 3 [5]11 12 int[] array = new int[deque.size()]; // [0]13 deque.toArray(array);", "date" : "February  7, 2015" },
  
    "/javascript/2015/02/07/closures-and-the-context": {  "id": "/javascript/2015/02/07/closures-and-the-context", "title": "Closures and the Context", "category": "javascript", "tags": "js closures context function", "content" :"OverviewClosures are a very interesting feature of JavaScript. To understand how they really work, you must read this amazing article by Gustavo Duarte. You can find it here. ", "date" : "February  7, 2015" },
  
    "/swift/2015/02/02/sequences-and-generators": {  "id": "/swift/2015/02/02/sequences-and-generators", "title": "Sequences and Generators", "category": "swift", "tags": "ios swift generators sequences", "content" :"OverviewIn swift, when we want to iterate over a sequence, we use a generator. It’s not the same as a generator in python or in javascript. This post is all about how to create and use them. More information about them can be found here.ContentIn swift, like in all languages, we can iterate over a collection using a for each or better named for in in swift. 1 // array 2 for item in [&quot;first&quot;, &quot;second&quot;, &quot;third&quot;] { 3     println(item) 4 } 5 // first 6 // second 7 // third 8  9 10 // dictionary11 for (key, value) in [&quot;key1&quot;:1, &quot;key2&quot;:2, &quot;key3&quot;:3] {12     println(&quot;key:\(key) value:\(value)&quot;)13 }14 // key:key1 value:115 // key:key2 value:216 // key:key3 value:317 18 19 // range20 for i in 0..&lt;3 {21     println(i)22 }23 // 024 // 125 // 2This works for built in types but how can we use the for..in with our own classes? We have to add the SequenceType protocol to our class.1 // Initial attempt2 extension Cats : SequenceType {3     func generate() -&gt; Generator {4         5     }6 }We have to return a Generator. A Generator has to conform to the GeneratorType protocol which has only one method, next(). 1 struct List&lt;T&gt; : GeneratorType { 2   var currentNode : List&lt;T&gt; 3  4   init(head: List&lt;T&gt;) { 5     currentNode = head 6   } 7  8   mutating func next() -&gt; T? { 9     switch currentNode {10     case let cons as List&lt;T&gt;:11       currentNode = cons.next12       return cons.value13     default:14       return nil15     }16   }17 }", "date" : "February  2, 2015" },
  
    "/python/2015/02/02/python2-vs-python3": {  "id": "/python/2015/02/02/python2-vs-python3", "title": "Python2 vs Python3", "category": "python", "tags": "differences new version python3", "content" :"OverviewThere is an amazing article that mentions the more important differences between the 2 versions of python. You can find it here.", "date" : "February  2, 2015" },
  
    "/python/2015/02/02/decorators": {  "id": "/python/2015/02/02/decorators", "title": "Decorators", "category": "python", "tags": "decorator", "content" :"OverviewDecorators allow you to modify a function when it gets called. It’s used for things like memoization that keeps track of return statements. You can find more information here. 1 def makebold(fn): 2     return lambda: &quot;&lt;b&gt;&quot; + fn() + &quot;&lt;/b&gt;&quot; 3  4 def makeitalic(fn): 5     return lambda: &quot;&lt;i&gt;&quot; + fn() + &quot;&lt;/i&gt;&quot; 6  7 @makebold 8 @makeitalic 9 def hello():10     return &quot;hello world&quot;11 12 hello()13 # &quot;&lt;b&gt;&lt;i&gt;hello world&lt;/i&gt;&lt;/b&gt;&quot;14 # &quot;&lt;b&gt;&quot; + (&quot;&lt;i&gt;&quot; + fn() + &quot;&lt;/i&gt;&quot;) + &quot;&lt;/b&gt;&quot;15 16 17 print hello() ## returns &lt;b&gt;&lt;i&gt;hello world&lt;/i&gt;&lt;/b&gt;", "date" : "February  2, 2015" },
  
    "/javascript/2015/02/01/learn-react-part-5-refs": {  "id": "/javascript/2015/02/01/learn-react-part-5-refs", "title": "Learn React Part 5: Refs", "category": "javascript", "tags": "reactjs refs", "content" :"OverviewA cool feature to be able to modify multiple things at once is refs. By placing a ref on html elements inside a component’s render return, you can access them anywhere inside the component’s methods. Egghead VideoContentPart 1We have to change several things to our previous code. First, we need to change the initial state to red, green and blue. Second, we have to change the update function. Notice that we say this.refs.*.getDOMNode().value. We’re looking for a particular ref in the render return statement and accessing its value. Third, we have to change the input to type range and we have to add ref=red (or another string) to each input. 1 &lt;script type=&quot;text/jsx&quot;&gt; 2     /*** @jsx React.DOM */ 3     var App = React.createClass({ 4         getInitialState:function(){ 5             return { 6               red: 0, 7               green: 0, 8               blue: 0 9             };10         },11         update:function(){12             this.setState({13               red: this.refs.red.getDOMNode().value,14               green: this.refs.green.getDOMNode().value,15               blue: this.refs.blue.getDOMNode().value16             });17         },18         render:function(){19             return (20                     &lt;div&gt;21                         &lt;input ref=&quot;red&quot; type=&quot;range&quot; onChange={this.update} /&gt;22                         &lt;label&gt;{this.state.red}&lt;/label&gt;23                         &lt;input ref=&quot;green&quot; type=&quot;range&quot; onChange={this.update} /&gt;24                         &lt;label&gt;{this.state.green}&lt;/label&gt;25                         &lt;input ref=&quot;blue&quot; type=&quot;range&quot; onChange={this.update} /&gt;26                         &lt;label&gt;{this.state.blue}&lt;/label&gt;27                     &lt;/div&gt;28                     )29         }30     });31 32     React.renderComponent(&lt;App /&gt;,document.body);33 &lt;/script&gt;Part 2Next, we should move the input into its own component. On line 36, we move the input into a component called Slider. We give it a ref of range. On line 12 - 15, we access each component’s refs.range to get the value. 1 &lt;script type=&quot;text/jsx&quot;&gt; 2     /*** @jsx React.DOM */ 3     var App = React.createClass({ 4         getInitialState:function(){ 5             return { 6               red: 0, 7               green: 0, 8               blue: 0 9             };10         },11         update:function(){12             this.setState({13               red: this.refs.red.refs.range.getDOMNode().value,14               green: this.refs.green.refs.range.getDOMNode().value,15               blue: this.refs.blue.refs.range.getDOMNode().value16             });17         },18         render:function(){19             return (20                     &lt;div&gt;21                         &lt;Slider ref=&quot;red&quot; update={this.update} /&gt;22                         &lt;label&gt;{this.state.red}&lt;/label&gt;23                         &lt;Slider ref=&quot;green&quot; update={this.update} /&gt;24                         &lt;label&gt;{this.state.green}&lt;/label&gt;25                         &lt;Slider ref=&quot;blue&quot; update={this.update} /&gt;26                         &lt;label&gt;{this.state.blue}&lt;/label&gt;27                     &lt;/div&gt;28                     )29         }30     });31 32     var Slider = React.createClass({33       render:function(){34           return (35               &lt;div&gt;36                   &lt;input ref=&quot;range&quot; min=&quot;0&quot; max=&quot;255&quot; type=&quot;range&quot; onChange={this.props.update} /&gt;37               &lt;/div&gt;38             )39       }40     });41 42     React.renderComponent(&lt;App /&gt;,document.body);43 &lt;/script&gt;", "date" : "February  1, 2015" },
  
    "/javascript/2015/01/31/learn-react-part-4-states": {  "id": "/javascript/2015/01/31/learn-react-part-4-states", "title": "Learn React Part 4: States", "category": "javascript", "tags": "reactjs state", "content" :"OverviewProperties are for data that is passed to components but doesn’t change. If we want the component to change, we have to use states. Egghead VideoContentPart 1To use state we have to add the getInitialState function to our component on line 5. In the render function, we have to change this.props.txt to the state version this.state.txt on line 10. 1 &lt;script type=&quot;text/jsx&quot;&gt; 2     /*** @jsx React.DOM */ 3     var App = React.createClass({ 4         getInitialState:function(){ 5             return { txt: &quot;this is the txt prop&quot;, id:0 }; 6         }, 7         render:function(){ 8             return ( 9                     &lt;div&gt;10                         &lt;h1&gt;{this.state.txt}&lt;/h1&gt;11                     &lt;/div&gt;12                     )13         }14     });15 16     React.renderComponent(&lt;App /&gt;,document.body)17 &lt;/script&gt;Part 2We can now modify the state and have the component rerender by updating the txt property of the state. 1 &lt;script type=&quot;text/jsx&quot;&gt; 2     /*** @jsx React.DOM */ 3     var App = React.createClass({ 4         getInitialState:function(){ 5             return { txt: &quot;this is the txt prop&quot;, id:0 }; 6         }, 7         updateTxt:function(e){ 8             this.setState({ txt: e.target.value }); 9         },10         render:function(){11             return (12                     &lt;div&gt;13                         &lt;input onChange={this.updateTxt} /&gt;14                         &lt;h1&gt;{this.state.txt}&lt;/h1&gt;15                     &lt;/div&gt;16                     )17         }18     });19 20     React.renderComponent(&lt;App /&gt;,document.body);21 &lt;/script&gt;Part 3Here’s an example of how to use states to display the color of a div based on the rgb. 1 &lt;script&gt; 2 var App = React.createClass({ 3     getInitialState:function(){ 4         return { 5           red: 0, 6           green: 0, 7           blue: 0, 8         }; 9     },10     update:function(){11         this.setState({12           red: this.refs.red.refs.range.getDOMNode().value,13           green: this.refs.green.refs.range.getDOMNode().value,14           blue: this.refs.blue.refs.range.getDOMNode().value15         });16     },17     render:function(){18         var myStyle = {19             height: &quot;100px&quot;,20             width: &quot;100px&quot;,21             backgroundColor: (&quot;rgb(&quot; + this.state.red22                                + &quot;,&quot; + this.state.green23                                + &quot;,&quot; + this.state.blue24                                + &quot;)&quot;)25         };26         return (27                 &lt;div&gt;28                     &lt;div style={myStyle} /&gt;29                     &lt;Slider ref=&quot;red&quot; update={this.update} /&gt;30                     &lt;label&gt;Red {this.state.red}&lt;/label&gt;31                     &lt;Slider ref=&quot;green&quot; update={this.update} /&gt;32                     &lt;label&gt;Green {this.state.green}&lt;/label&gt;33                     &lt;Slider ref=&quot;blue&quot; update={this.update} /&gt;34                     &lt;label&gt;Blue {this.state.blue}&lt;/label&gt;35                 &lt;/div&gt;36                 )37     }38 });39 40 var Slider = React.createClass({41   render:function(){42       return (43           &lt;div&gt;44               &lt;input ref=&quot;range&quot; min=&quot;0&quot; max=&quot;255&quot; type=&quot;range&quot; onChange={this.props.update} /&gt;45           &lt;/div&gt;46         )47   }48 });49 &lt;/script&gt;", "date" : "January 31, 2015" },
  
    "/javascript/2015/01/31/learn-react-part-3-properties": {  "id": "/javascript/2015/01/31/learn-react-part-3-properties", "title": "Learn React Part 3: Properties", "category": "javascript", "tags": "reactjs property", "content" :"OverviewProperties can get passed down from a component to it’s children. Egghead VideoContentPart 1You can pass data to your component using properties. We added txt prop. 1 &lt;!doctype html&gt; 2 &lt;html lang=&quot;en&quot;&gt; 3 &lt;head&gt; 4     &lt;meta charset=&quot;UTF-8&quot;&gt; 5     &lt;title&gt;Setting Properties&lt;/title&gt; 6     &lt;script src=&quot;http://fb.me/react-0.8.0.js&quot;&gt;&lt;/script&gt; 7   &lt;script src=&quot;http://fb.me/JSXTransformer-0.8.0.js&quot;&gt;&lt;/script&gt; 8 &lt;/head&gt; 9 &lt;body&gt;10 &lt;script type=&quot;text/jsx&quot;&gt;11     /*** @jsx React.DOM */12     var App = React.createClass({13         render:function(){14             console.log(this.props.txt)15             return (16                     &lt;div&gt;17                         &lt;h1&gt;{this.props.txt}&lt;/h1&gt;18                         &lt;b&gt;bold&lt;/b&gt;19                     &lt;/div&gt;20                     )21         }22     });23 24     React.renderComponent(&lt;App txt=&quot;This is the txt prop&quot; /&gt;,document.body)25 &lt;/script&gt;26 &lt;/body&gt;27 &lt;/html&gt;Part 2You can also specify the props that you’re expecting using the propTypes property. By default, a propType is optional; however, if you add cat: React.PropTypes.number.isRequired then React will complain because it’s not one of the properties of App. If we add cat to the app initialization on line 17, it will work. 1 &lt;script type=&quot;text/jsx&quot;&gt; 2     /*** @jsx React.DOM */ 3     var App = React.createClass({ 4         propTypes:{ 5           txt: React.PropTypes.string, 6           cat: React.PropTypes.number.isRequired 7         }, 8         render:function(){ 9             return (10                     &lt;div&gt;11                         &lt;h1&gt;{this.props.txt}&lt;/h1&gt;12                     &lt;/div&gt;13                     )14         }15     });16 17     React.renderComponent(&lt;App cat={5} txt=&quot;This is the txt prop&quot; /&gt;,document.body)18 &lt;/script&gt;Part 3You can define the default properties for any component using the getDefaultProps property on the component.Which means the code below will work even though we don’t have cat and txt on on App initialization on line 23. 1 &lt;script type=&quot;text/jsx&quot;&gt; 2     /*** @jsx React.DOM */ 3     var App = React.createClass({ 4         getDefaultProps: function(){ 5           return { 6               txt: &quot;This is stuff&quot;, 7               cat: 0 8           }; 9         },10         propTypes:{11           txt: React.PropTypes.string,12           cat: React.PropTypes.number.isRequired13         },14         render:function(){15             return (16                     &lt;div&gt;17                         &lt;h1&gt;{this.props.txt}&lt;/h1&gt;18                     &lt;/div&gt;19                     )20         }21     });22 23     React.renderComponent(&lt;App /&gt;,document.body)24 &lt;/script&gt;", "date" : "January 31, 2015" },
  
    "/javascript/2015/01/31/learn-react-part-2-render-gotchas": {  "id": "/javascript/2015/01/31/learn-react-part-2-render-gotchas", "title": "Learn React Part 2: Render Gotchas", "category": "javascript", "tags": "reactjs", "content" :"OverviewA general rule of thumb for returning multiple elements from the render function is to wrap everything with a &lt;div&gt;. Egghead VideoContentIf you try to add multiple html tags in the return statement, the web app will break.The way to fix things is to wrap everything in a &lt;div /&gt; tag. 1 &lt;!doctype html&gt; 2 &lt;html lang=&quot;en&quot;&gt; 3     &lt;head&gt; 4         &lt;meta charset=&quot;UTF-8&quot;&gt; 5         &lt;title&gt;Render Method Gotchas&lt;/title&gt; 6         &lt;script src=&quot;http://fb.me/react-0.8.0.js&quot;&gt;&lt;/script&gt; 7         &lt;script src=&quot;http://fb.me/JSXTransformer-0.8.0.js&quot;&gt;&lt;/script&gt; 8     &lt;/head&gt; 9     &lt;body&gt;10     &lt;script type=&quot;text/jsx&quot;&gt;11         /*** @jsx React.DOM */12         var App = React.createClass({13             render:function(){14                 return (15                         &lt;div&gt;16                             &lt;h1&gt;Hello World&lt;/h1&gt;17                             &lt;b&gt;bold&lt;/b&gt;18                         &lt;/div&gt;19                         )20             }21         });22 23         React.renderComponent(&lt;App /&gt;,document.body)24     &lt;/script&gt;25     &lt;/body&gt;26 &lt;/html&gt;OUTPUT:", "date" : "January 31, 2015" },
  
    "/javascript/2015/01/31/learn-react-part-1-first-component": {  "id": "/javascript/2015/01/31/learn-react-part-1-first-component", "title": "Learn React Part 1: First Component", "category": "javascript", "tags": "reactjs component", "content" :"OverviewThis is part 1 of me learning ReactJS. I’m going to be following this series while trying to master ReactJS.ContentStep 11 &lt;!doctype html&gt;2 &lt;html lang=&quot;en&quot;&gt;3   &lt;head&gt;4       &lt;meta charset=&quot;UTF-8&quot;&gt;5       &lt;title&gt;First Component&lt;/title&gt;6   &lt;/head&gt;7   &lt;body&gt;&lt;/body&gt;8 &lt;/html&gt;We start off with a simple html page.Step 2 1 &lt;!doctype html&gt; 2 &lt;html lang=&quot;en&quot;&gt; 3   &lt;head&gt; 4       &lt;meta charset=&quot;UTF-8&quot;&gt; 5       &lt;title&gt;First Component&lt;/title&gt; 6       &lt;script src=&quot;http://fb.me/react-0.8.0.js&quot;&gt;&lt;/script&gt; 7       &lt;script src=&quot;http://fb.me/JSXTransformer-0.8.0.js&quot;&gt;&lt;/script&gt; 8   &lt;/head&gt; 9   &lt;body&gt;&lt;/body&gt;10 &lt;/html&gt;Now we add the react.js and the JSXTransformer.js scripts. The JSXTransformer allows you to write react’s special jsx syntax directly without having to compile your jsx files.Step 3 1 &lt;html lang=&quot;en&quot;&gt; 2   &lt;head&gt; 3       &lt;meta charset=&quot;UTF-8&quot;&gt; 4       &lt;title&gt;First Component&lt;/title&gt; 5       &lt;script src=&quot;http://fb.me/react-0.8.0.js&quot;&gt;&lt;/script&gt; 6       &lt;script src=&quot;http://fb.me/JSXTransformer-0.8.0.js&quot;&gt;&lt;/script&gt; 7       &lt;script type=&quot;text/jsx&quot;&gt; 8           /*** @jsx React.DOM */ 9           React.renderComponent(&lt;h1&gt;Hello World&lt;/h1&gt;,document.body);10       &lt;/script&gt;11   &lt;/head&gt;12   &lt;body&gt;&lt;/body&gt;13 &lt;/html&gt;Next we added a jsx script tag. Notice that we add type=text/jsx instead of type=text/javascript. At the beginning of every jsx file or script tag we have to add /*** @jsx React.DOM */ for the Transformer to transform the file/script. The &lt;h1&gt;Hello World&lt;/h1&gt; is just plain html. The Transformer will turn it into React.DOM for it to be just javascript. We render our component by using React.renderComponent passing in our component and where we want to render it (it can be on any DOM element).Step 4 1 &lt;html lang=&quot;en&quot;&gt; 2   &lt;head&gt; 3       &lt;meta charset=&quot;UTF-8&quot;&gt; 4       &lt;title&gt;First Component&lt;/title&gt; 5       &lt;script src=&quot;http://fb.me/react-0.8.0.js&quot;&gt;&lt;/script&gt; 6       &lt;script src=&quot;http://fb.me/JSXTransformer-0.8.0.js&quot;&gt;&lt;/script&gt; 7       &lt;script type=&quot;text/jsx&quot;&gt; 8           /*** @jsx React.DOM */ 9           var App = React.createClass({10               render:function(){11                   return (12                       &lt;h1&gt;Hello World&lt;/h1&gt;13                   )14               }15           });16 17           React.renderComponent(&lt;App /&gt;,document.body);18       &lt;/script&gt;19   &lt;/head&gt;20   &lt;body&gt;&lt;/body&gt;21 &lt;/html&gt;We now create a component called App. You create a component using React.createClass passing in an object which represents that component. Every component has a render function which represents what it will look like. Our App component will display &lt;h1&gt;Hello World&lt;/h1&gt;.OUTPUT:", "date" : "January 31, 2015" },
  
    "/python/2015/01/31/generators": {  "id": "/python/2015/01/31/generators", "title": "Generators", "category": "python", "tags": "generator", "content" :"OverviewIn python, it’s common to see something like for _ in range(10). This says loop 10 but it also creates a list of 10 elements. If you replace the 10 with 1000000, it will create a very large list and take up all the memory for nothing. Instead, you could use a generator. A generator is like a pause and continue on a method and it improves the space complexity of your code. More information about generators can be found hereA generator comprehension is the lazy version of a list comprehension.It is just like a list comprehension except that it returns an iterator instead of the list ie an object with a next() method that will yield the next element.Imagine you want to sum up all the numbers from 0 to 1000000. It would look something like this.1 def firstn(n):2      num, nums = 0, []3      while num &lt; n:4          nums.append(num)5          num += 16      return nums7 8 sum_of_first_n = sum(firstn(1000000))The equivilant generator will look like this.1 def firstn(n):2     num = 03     while num &lt; n:4         yield num5         num += 16 7 sum_of_first_n = sum(firstn(1000000))You can also create generator comprehensions. 1 # normal list comprehension 2 my_list = [1, 3, 5, 9, 2, 6] 3 filtered_list = [item for item in my_list if item &gt; 3] 4 print(filtered_list) # [5, 9, 6] 5  6  7 # generator comprehension 8 filtered_gen = (item for item in my_list if item &gt; 3) 9 # you can use it in a `for in` loop10 # or you can pass it to the list constructor11 gen_to_list = list(filtered_gen)12 print(gen_to_list) # [5, 9, 6]", "date" : "January 31, 2015" },
  
    "/python/2015/01/26/web-crawler": {  "id": "/python/2015/01/26/web-crawler", "title": "Web Crawler", "category": "python", "tags": "python beautifulsoup requests crawler scraper", "content" :"OverviewThis post is about web crawling and scraping in python. The modules we will need are requests and BeautifulSoup. More information can be found here for requests and here for BeautifulSoup. 1 # first we need the 2 modules 2 import requests 3 from bs4 import BeautifulSoup 4  5 def crawl(): 6     # retrieve google page 7     source = requests.get(&quot;http://www.google.com&quot;); 8      9     # get the source in text format10     plain_text = source.text11     soup = BeautifulSoup(plain_text)12 13     # get every link on the page and print it14     for link in soup.findAll(&#39;a&#39;):15         print( link.get(&#39;href&#39;).text )16 17     # get the first table on the page and print all the table columns18     for tableColumn in soup.findAll(&#39;table&#39;)[0].findAll(&#39;td&#39;):19         print( tableColumn.text )", "date" : "January 26, 2015" },
  
    "/csharp/2015/01/26/c-for-java-developers": {  "id": "/csharp/2015/01/26/c-for-java-developers", "title": "C# for Java developers", "category": "csharp", "tags": "java c# comparison guide", "content" :"I recently came across a guide to C# for Java developers. It is very detailed and clear and I think anyone who knows java and wants to know how C# is different should read it. Here’s the original .", "date" : "January 26, 2015" },
  
    "/csharp/2015/01/23/task-parallel-library": {  "id": "/csharp/2015/01/23/task-parallel-library", "title": "Task Parallel Library", "category": "csharp", "tags": "c# parallel task", "content" :"OverviewParallel programming is very important to know and C# does it so well. This post is all about the System.Threading namespace. More information can be found here.ExampleHow do we make a line of code execute in the background on a separate thread? 1 class Program { 2     public static void Main(string[] args) { 3         // Start task with the constructor 4         var t1 = new Task( () =&gt; DoWork(1, 1000) ); 5         t1.Start(); 6  7         // Start task with a factory 8         var t2 = Task.Factory.StartNew( () =&gt; DoWork(2, 1200) ) 9                              .ContinueWith( (prevTask) =&gt; DoOtherWork(2, 1200) );10     }11 12     public static void DoWork(int id, int sleepTime) {13         Console.WriteLine(&quot;Task {0} starting.&quot;, id);14         Thread.sleep(sleepTime);15         Console.WriteLine(&quot;Task {0} stopping.&quot;, id);16     }17 18     public static void DoOtherWork(int id, int sleepTime) {19         Console.WriteLine(&quot;Other Task {0} starting.&quot;, id);20         Thread.sleep(sleepTime);21         Console.WriteLine(&quot;Other Task {0} stopping.&quot;, id);22     }23 }24 25 /*26 Task 2 starting.27 Task 1 starting.28 Task 1 stopping.29 Task 2 stopping.30 Other Task 2 starting.31 Other Task 2 stopping.32  */Given the code above, how do we wait on the main thread until all the tasks are done?1 public static void Main(string[] args) {2     var t1 = Task.Factory.StartNew( () =&gt; DoWork(1, 1000) );3     var t2 = Task.Factory.StartNew( () =&gt; DoWork(2, 1200) );4     var taskList = new List&lt;Task&gt;{t1, t2};5 6     // or we could use Task.WaitAny7     Task.WaitAll( taskList.ToArray() );8     Console.WriteLine(&quot;Finished all tasks&quot;);9 }", "date" : "January 23, 2015" },
  
    "/csharp/2015/01/22/sealed-vs-abstract-vs-static": {  "id": "/csharp/2015/01/22/sealed-vs-abstract-vs-static", "title": "Sealed vs Abstract vs Static", "category": "csharp", "tags": "c# sealed abstract static", "content" :"OverviewHere’s a small table that shows the difference between abstract, sealed and static classes. See the example below. More info can be found here.1 /*2 +-------------------------+--------+--------+--------+----------+3 |       Class Type        | normal | static | sealed | abstract |4 +-------------------------+--------+--------+--------+----------+5 | Can be instantiated     | yes    | no     | yes    | no       |6 | Can be inherited        | yes    | no     | no     | yes      |7 | Can inherit from others | yes    | no     | yes    | yes      |8 +-------------------------+--------+--------+--------+----------+9  */", "date" : "January 22, 2015" },
  
    "/csharp/2015/01/22/reflection": {  "id": "/csharp/2015/01/22/reflection", "title": "Reflection", "category": "csharp", "tags": "c# reflection", "content" :"OverviewReflection is the ability to make modifications at runtime by making use of introspection. Type Introspection is the ability to inspect the code in the system and see object types. C#’s reflectin is beautiful. See the example below. More info can be found here.ExampleGiven 1 public class BaseClass { 2     // ... 3 } 4 public class Jake : BaseClass, ITest { 5     // ... 6 } 7 public class Tom : ITest { 8     // ... 9 }10 public class Random : BaseClass {11     // ...12 }You can do the following 1 public class Instantiator { 2     public static void InstantiateITest() { 3         var instances = from t in Assembly.GetExecutingAssembly().GetTypes()  // Get every class 4                         where t.GetInterfaces().Contains(typeof(ITest))       // That implements ITest interface 5                               &amp;&amp; t.GetConstructor(Type.EmptyTypes) != null    // and has a constructor 6                         select Activator.CreateInstance(t) as ITest;          // create an instance 7         foreach(var instance in instances) { 8             // do something with them 9         }10         // instances = [Jake, Tom]11     }12 13     public static void InstantiateBaseClasses() {14         var instances = from t in Assembly.GetExecutingAssembly().GetTypes()  // Get every class15                         where t.IsSubClassOf(typeof(BaseClass))               // That derives from BaseClass16                               &amp;&amp; t.GetConstructor(Type.EmptyTypes) != null    // and has a constructor17                         select Activator.CreateInstance(t) as BaseClass       // create an instance18         foreach(var instance in instances) {19             // do something with them20         }21         // instances = [Jake, Random]22     }23 }", "date" : "January 22, 2015" },
  
    "/csharp/2015/01/22/generics": {  "id": "/csharp/2015/01/22/generics", "title": "Generics", "category": "csharp", "tags": "c# generics", "content" :"OverviewGenerics are amazing, here are some examples on how to use generics in C#. More info can be found here.ExamplesProperties 1 public class Result&lt;T&gt; { 2     public bool Success { get; set; } 3     public T Data { get; set; } 4 } 5  6 public class AnotherResult&lt;T, U&gt; { 7     public T Success { get; set; } 8     public U Data { get; set; } 9 }10 11 public class Program {12     public static void Main(string[] args) {13         var result = new Result&lt;int&gt; { Success=true, Data=5 };14         var result2 = new Result&lt;string&gt; { Success=false, Data=&quot;thingy&quot; };15         var result3 = new AnotherResult&lt;int, bool&gt; { Success=5, Data=false };16         17         Console.WriteLine(&quot;Success: {0} - Data: {1}&quot;, result.Success, result.Data);18         // Success: true - Data: 519         Console.WriteLine(&quot;Success: {0} - Data: {1}&quot;, result2.Success, result2.Data);20         // Success: false - Data: thingy21         Console.WriteLine(&quot;Success: {0} - Data: {1}&quot;, result3.Success, result3.Data);22         // Success: 5 - Data: false23     }24 }Methods 1 public class Result&lt;T&gt; { 2     public bool Success { get; set; } 3     public T Data { get; set; } 4 } 5  6 public class DoSomething { 7     public void DoIt&lt;T&gt;(Result&lt;T&gt; result) { 8         Console.WriteLine(&quot;Success: {0} - Data: {1}&quot;, result.Success, result.Data); 9     }10 }11 12 public class Program {13     public static void Main(string[] args) {14         var result = new Result&lt;int&gt; { Success=true, Data=5 };15         var doSomething = new DoSomething();16         doSomething.DoIt(result);17         // Success: true - Data: 518     }19 }", "date" : "January 22, 2015" },
  
    "/csharp/2015/01/22/extension-methods": {  "id": "/csharp/2015/01/22/extension-methods", "title": "Extension Methods", "category": "csharp", "tags": "c# extension", "content" :"OverviewThis is how you extend a class that already exists and that you don’t have access to. More info can be found here.ExamplesFirst declare a static class, then create a static method that has this in front of the first parameter… Done! 1 public class Extensions { 2     public static void SayHello(this Person person) { 3         Console.WriteLine(&quot;Hello, my name is {0} and I&#39;m {1}&quot;, person.Name, person.Age); 4     } 5  6     public static void SayThing(this Person person, string thing) { 7         Console.WriteLine(&quot;Hello {0} said {1}&quot;, thing, person.Name); 8     } 9 }10 11 public class Program {12     public static void Main(string[] args) {13        var person = new Person { Name=&quot;Tom&quot;, Age=5 };14        person.SayHello();         // Hello, my name is Tom and I&#39;m 515        person.SayThing(&quot;Random&quot;); // Hello Random said Tom16     }17 }", "date" : "January 22, 2015" },
  
    "/csharp/2015/01/22/attributes": {  "id": "/csharp/2015/01/22/attributes", "title": "Attributes", "category": "csharp", "tags": "c# attributes", "content" :"OverviewAttributes can be used to add more information about a particular class in C#. This is an example (and code) of where you would use one. More info can be found here.Assigning 1 // Lets create an attribute that only works on classes that are used for databases 2 [System.AttributeUsage(System.AttributeTargets.Class)] 3 public class DatabaseAttribute : Attribute { 4     private string _url; 5     private int _id; 6     public string comment; 7  8     public DatabaseAttribute(string url, int id) { 9         this._url = url;10         this._id = id;11         comment = &quot;&quot;;12     }13 14     public string SayUrl() {15         return &quot;My url is &quot; + url;16     }17 }18 19 [Database(&quot;https://....&quot;, 1, comment = &quot;My mongo database class&quot;)]20 public class MongoDB {21     // ...22 }Retrieving 1 // Given the code above 2  3 public class GetAttributeClass { 4     public static void GetAttributeData() { 5         // Get the attributes for MongoDB class, can have more than 1 6         System.Attribute[] attrs = System.Attribute.GetCustomAttributes(typeof(MongoDB)); // System.Type 7  8         // Display them 9         foreach (System.Attribute attr in attrs) {10             if (attr is Database) {11                 Database a = (Database)attr;12                 System.Console.WriteLine(&quot;{0} - {1}&quot;, a.SayUrl(), a.comment);13             }14         }15     }16 }17 18 // Output:19 // My url is https://.... - My mongo database classCool Applications of Attributes 1 public class NoAttribute { 2    3 } 4  5 [Database(&quot;https://something....&quot;, 2)] 6 public class Sql { 7      8 } 9 10 public class Program {11     public static void Main(string[] args) {12         // Retrieve all the classes that have a DatabaseAttribute13         var databaseClasses = from t in Assembly.GetExecutingAssembly().GetTypes()14                               where t.GetCustomAttributes&lt;DatabaseAttribute&gt;().Count() &gt; 015                               select t;16         foreach(var db in databaseClasses) {17             Console.WriteLine(t.Name);18         }19     }20 }21 22 // Output:23 // MongoDB24 // Sql", "date" : "January 22, 2015" },
  
    "/csharp/2015/01/19/operator-overloading": {  "id": "/csharp/2015/01/19/operator-overloading", "title": "Operator overloading", "category": "csharp", "tags": "c# csharp operator", "content" :"OverviewThis is how you overload an operator. More info can be found here.Normal 1 public class Complex { 2     public static Complex operator +(Complex c1, Complex c2)  3     { 4         return new Complex(c1.real + c2.real, c1.imaginary + c2.imaginary); 5     }    6 } 7  8 class Test { 9     static void Main(){10         Complex num1 = new Complex(2,3);11         Complex num2 = new Complex(3,4);12 13         // Add two Complex objects (num1 and num2) through the14         // overloaded plus operator:15         Complex sum = num1 + num2;16     } 17 }18 19 /*20  *  First complex number:  2 + 3i21  *  Second complex number: 3 + 4i22  *  The sum of the two numbers: 5 + 7i23  */Implicit and Explicit 1 public class MyObject { 2     // Implicit conversion from MyObject to string. Maps true to  3     // &quot;MyObject.Truthy&quot; and false to &quot;MyObject.Falsy&quot; 4     public static implicit operator string(MyObject x) { 5         return MyObject.value.ToString(); 6     } 7  8     // Explicit conversion from MyObject to int. 9     public static explicit operator int(MyObject x) {10         return MyObject.value;11     }   12 }13 14 class Test {15     static void Main(){16         MyObject obj = new MyObject(5);17         Console.WriteLine(obj);         // implicit conversion to string18         Console.WriteLine( (int)obj );  // explicit conversion to int19     } 20 }21 22 /*23  *  524  *  525  */", "date" : "January 19, 2015" },
  
    "/swift/2015/01/18/uiview-transitions": {  "id": "/swift/2015/01/18/uiview-transitions", "title": "UIView Transitions", "category": "swift", "tags": "ios ui transition", "content" :"OverviewIn this post, I’ll show you how to transition between 2 views on click.  1 // ### in viewDidLoad ### 2  3 let container = UIView() 4 let redSquare = UIView() 5 let blueSquare = UIView() 6  7 // set container frame and add to the screen 8 self.container.frame = CGRect(x: 60, y: 60, width: 200, height: 200) 9 self.view.addSubview(container)10 11 // set red square frame up12 // we want the blue square to have the same position as redSquare13 // so lets just reuse blueSquare.frame14 self.redSquare.frame = CGRect(x: 0, y: 0, width: 200, height: 200)15 self.blueSquare.frame = redSquare.frame16 17 // set background colors18 self.redSquare.backgroundColor = UIColor.redColor()19 self.blueSquare.backgroundColor = UIColor.blueColor()20 21 // for now just add the redSquare22 // we&#39;ll add blueSquare as part of the transition animation23 self.container.addSubview(self.redSquare)Ok, now we need to animate on click for it to look like this.1 // ### in click event ###2 3 // create a tuple to hold the views4 var views = (frontView: self.redSquare, backView: self.blueSquare)5 if self.redSquare.superview ==  nil {6   views = (frontView: self.blueSquare, backView: self.redSquare)7 }8 let transitionOptions = UIViewAnimationOptions.TransitionCurlUp9 UIView.transitionFromView(views.frontView, toView: views.backView, duration: 1.0, options: transitionOptions, completion: nil)", "date" : "January 18, 2015" },
  
    "/swift/2015/01/18/move-to-another-viewcontroller-programmatically": {  "id": "/swift/2015/01/18/move-to-another-viewcontroller-programmatically", "title": "Move to another ViewController Programmatically", "category": "swift", "tags": "ios ui viewcontroller animation", "content" :"OverviewSo you have a ViewController in your storyboard and you want to be able to display it from code but don’t know how. The answer is the presentViewController function. 1 // we have to get the controller 2 // Make sure you add an Identified to your controller 3 // in the storyboard 4 var newController = self.storyboard?.instantiateViewControllerWithIdentifier(&quot;NewViewController&quot;) as NewViewController 5  6 // If you want to fade out or animate your current viewcontroller 7 // you have to use a CATransition 8 var transition = CATransition() 9 transition.duration = 1;10 transition.type = kCATransitionFade;11 transition.subtype = kCATransitionFromBottom;12 self.view.window?.layer.addAnimation(transition, forKey: kCATransition)13 14 // Now we display our new controller15 // The animation is false because the default animation is bad16 self.presentViewController(newController, animated: false, completion: nil)", "date" : "January 18, 2015" },
  
    "/python/2015/01/17/python-file-io": {  "id": "/python/2015/01/17/python-file-io", "title": "Python: File Input and Output", "category": "python", "tags": "io file", "content" :"OverviewThis post is about file io in python. More information can be found here. 1 # reading a file in 1 shot 2 with open(&#39;filename.txt&#39;, &#39;r&#39;) as file: 3     content = file.read() 4  5 # reading a file, getting all the lines 6 with open(&#39;filename.txt&#39;, &#39;r&#39;) as file: 7     content = file.readlines() 8  9 # writing to a file/creating a file10 with open(&#39;filename.txt&#39;, &#39;w&#39;) as file:11     file.write(&#39;This is output&#39;)12 13 # appending to a file14 with open(&#39;filename.txt&#39;, &#39;ag&#39;) as file:15     file.write(&#39;This is output&#39;)", "date" : "January 17, 2015" },
  
    "/python/2015/01/17/generating-primes": {  "id": "/python/2015/01/17/generating-primes", "title": "Python Generating primes", "category": "python", "tags": "primes", "content" :"Code without comments1 def generatePrime(n):2     sieve = [True] * n3     for i in xrange(3, int(n**0.5)+1, 2):4         if sieve[i]:5             sieve[i*2::i] = [False] * len(sieve[i*2::i])6     return [2] + [i for i in xrange(3, n+1, 2) if sieve[i]]Code with comments 1 def generatePrime(n): 2     # create list of booleans length n 3     sieve = [True] * n 4     # go from 3 to sqrt(n) by 2 ex: [3, 5, 7, 9] 5     for i in xrange(3, int(n**0.5)+1, 2): 6         if sieve[i]: 7             # if i = 3 you&#39;d turn the following into False 8             # [6, 9, 12, 15....] 9             sieve[i*2::i] = [False] * len(sieve[i*2::i])10     # go through list, starting at 3, by 2. If the sieve at that index11     # is True, add it to the array12     return [2] + [i for i in xrange(3, n+1, 2) if sieve[i]]Step by Step. We will use the index number instead of boolean for clarification. 1 # Given parameter 30 2  3 # initial sieve 4 sieve = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29] 5  6 # index 3 7 # turn the following indecies false [9, 12, 15, 18, 21, 24, 27] 8 sieve = [0,1,2,3,4,5,6,7,8,False,10,11,False,13,14,False,16,17,False,19,20,False,22,23,False,25,26,False,28,29] 9 10 # index 511 # turn the following indecies false [10, 15, 20, 25]12 sieve = [0,1,2,3,4,5,6,7,8,False,False,11,False,13,14,False,16,17,False,19,False,False,22,23,False,False,26,False,28,29]13 14 # Go from 3 to 30 by 2. [3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]15 # If the value at that index is not False, add it to the list16 returnLst = [2] + [3, 5, 7, 11, 13, 17, 19, 23, 29]", "date" : "January 17, 2015" },
  
    "/python/2015/01/16/regular-expressions": {  "id": "/python/2015/01/16/regular-expressions", "title": "Regular Expressions", "category": "python", "tags": "python regex", "content" :"OverviewIn this post, I will be talking about python’s regular expression module called re. I’ll mainly give examples. More information can be found here here.Examples 1 import re 2  3 # look for &#39;thing&#39; in the string &#39;that thing&#39; 4 match = re.search(r&#39;thing&#39;, &#39;that thing&#39;) 5 # match.group() == &#39;thing&#39; 6  7 # look for &#39;thig&#39; in the string &#39;that thing&#39; 8 match = re.search(r&#39;thig&#39;, &#39;that thing&#39;) 9 # match == None10 11 # . = any character except \n12 match = re.search(r&#39;..d+&#39;, &#39;abcdd&#39;)13 # match.group() == &#39;bcdd&#39;", "date" : "January 16, 2015" },
  
    "/csharp/2015/01/12/windows-8-development-managing-states": {  "id": "/csharp/2015/01/12/windows-8-development-managing-states", "title": "Windows 8 development: Managing States", "category": "csharp", "tags": "c# windows windows phone state", "content" :"OverviewA mobile app should aways keep track of the state. This means that if you write a message or complete a level it should be saved. The next time you go to that app, you should restart from where you left off. This feature is very easy to implement on the Windows Phone. More information can be found here.Frame StateThere are 2 very important methods to know about: OnLaunched and OnSuspending. We need to use SuspensionManager to save everything. If you used a BlankPage, you won’t have the SuspensionManager. Just create a BasicPage and it will prompt you to automatically create the some helped classes (including the SuspensionManager) for you.Inside OnLaunched, we will add the following line of code.1 ManagingState.Common.SuspensionManager.RegisterFrame(appFrame, &quot;appFrame&quot;);In OnSuspending, we have to save the state.1 // make sure you add async to the method signature2 await ManagingState.Common.SuspensionManager.SaveAsync();We also need to restore our state, we do this again in OnLaunched. A bit lower than the code we wrote to register the frame, we will check if the app was terminated and restore the state if it was.1 // make sure you add async to the method signature again2 await ManagingState.Common.SuspensionManager.RestoreAsync();Application StateAbove we saved what Frame or Page the user was on, but what if we want to store specific information that the user has entered? To accomplish this, we will use the local storage.Save the state.1 Windows.Storage.ApplicationDataContainer localStorage = Windows.Storage.ApplicationData.Current.LocalSettings;2 localStorage.Values[&quot;someKey&quot;] = &quot;I&#39;m saving this text for later&quot;;Restore the state in NavigationHelper_LoadState (it will be there if you chose BasicPage).1 // Again we get the storage2 Windows.Storage.ApplicationDataContainer localStorage = Windows.Storage.ApplicationData.Current.LocalSettings;3 4 if ( localStorage.Values.ContainsKey(&quot;someKey&quot;) ) {5   myLocalVariable = localStorage.Values[&quot;someKey&quot;].toString();6 }The other way to save Application state (which is much easier) is with NavigationHelper_SaveState and NavigationHelper_LoadState.Save State.1 e.PageState[&quot;someKey&quot;] = &quot;I&#39;m saving this text for later&quot;;Load State.1 if ( e.PageState != null &amp;&amp; e.PageState.ContainsKey(&quot;someKey&quot;) ) {2   myLocalVariable = e.PageState[&quot;someKey&quot;].toString();3 }", "date" : "January 12, 2015" },
  
    "/csharp/2015/01/11/windows-8-development-styling-xaml": {  "id": "/csharp/2015/01/11/windows-8-development-styling-xaml", "title": "Windows 8 development: styling xaml", "category": "csharp", "tags": "c# windows windows phone xaml styling", "content" :"OverviewIn this post, I will be talking about how to style xaml controls. Similar to css, we can create styles that can be reused for multiple controls throughout our solution. More information can be found here here.Local Style1 &lt;Page.Resources&gt;2   &lt;SolidColorBrush x:Key=&quot;MyBrush&quot; Color=&quot;Brown&quot; /&gt;3 &lt;/Page.Resources&gt;4 5 &lt;StackPanel&gt;6   &lt;TextBlock Text=&quot;Some text&quot; Foreground=&quot;{StaticResource MyBrush}&quot; /&gt;7 8   &lt;Button Content=&quot;Some text&quot; Background=&quot;{StaticResource MyBrush}&quot; /&gt;9 &lt;/StackPanel&gt;We first create a &lt;Page.Resources&gt; element. Inside we create a &lt;SolidColorBrush&gt; that we can reuse by using it’s key, MyBrush. To use it, we have to use the following syntax: {StaticResource MyBrush}.The style above can be applied to anything and it’s simple. Let’s create a more complicated style that can be applied only to buttons. 1 &lt;Page.Resources&gt; 2   &lt;Style TargetType=&quot;Button&quot; x:Key=&quot;MyButtonStyle&quot;&gt; 3     &lt;Setter Property=&quot;Background&quot; Value=&quot;Blue&quot; /&gt; 4     &lt;Setter Property=&quot;FontFamily&quot; Value=&quot;Arial Black&quot; /&gt; 5     &lt;Setter Property=&quot;FontSize&quot; Value=&quot;36&quot; /&gt; 6   &lt;/Style&gt; 7 &lt;/Page.Resources&gt; 8  9 &lt;StackPanel&gt;10   &lt;Button Content=&quot;My Brush Example&quot; Style=&quot;{StaticResource MyButtonStyle}&quot; /&gt;11 &lt;/StackPanel&gt;Keep in mind that if we now apply Background=Green to the Button directly, it will take precedence over the style. Even if we bind a color to it.Global StyleThe code above (Local) works only on the page where the &lt;Style&gt; was declared. To create a style which can be used anywhere, we have to create an &lt;Application.Resources&gt; tag inside App.xaml.1 &lt;Application.Resources&gt;2   &lt;Style TargetType=&quot;Button&quot; x:Key=&quot;MyButtonStyle&quot;&gt;3     &lt;Setter Property=&quot;Background&quot; Value=&quot;Blue&quot; /&gt;4     &lt;Setter Property=&quot;FontFamily&quot; Value=&quot;Arial Black&quot; /&gt;5     &lt;Setter Property=&quot;FontSize&quot; Value=&quot;36&quot; /&gt;6   &lt;/Style&gt;7 &lt;/Application.Resources&gt;ThemesOn the windows phone, people can set their own colors and backgrounds. By going in Settings, they can set specific themes that apply to tiles and to apps that take advantage of these settings. Let’s change the Background to the background chosen by the user in his settings.1 &lt;Application.Resources&gt;2   &lt;Style TargetType=&quot;Button&quot; x:Key=&quot;MyButtonStyle&quot;&gt;3     &lt;Setter Property=&quot;Background&quot; Value=&quot;{ThemeResource PhoneAccentBrush}&quot; /&gt;4     &lt;Setter Property=&quot;FontFamily&quot; Value=&quot;Arial Black&quot; /&gt;5     &lt;Setter Property=&quot;FontSize&quot; Value=&quot;36&quot; /&gt;6   &lt;/Style&gt;7 &lt;/Application.Resources&gt;We use the device menu to change the accent color to yellow and we change the theme to Light.", "date" : "January 11, 2015" },
  
    "/csharp/2015/01/11/windows-8-development-navigate-to-a-page": {  "id": "/csharp/2015/01/11/windows-8-development-navigate-to-a-page", "title": "Windows 8 development: navigate to a page", "category": "csharp", "tags": "c# windows windows phone navigation", "content" :"OverviewIn mobile apps, we often navigate to different pages. In this post, we will see how to do that on the windows phone. More information can be found here.DetailsWe will have MainPage which will have a button whos click event takes us to a new page, Page2.MainPage xaml will have a button that will take you to the next page.1 &lt;Button Content=&quot;Go to Page2&quot; onClick=&quot;Button_Click&quot; /&gt;The click event for that button will look like this.1 // MainPage2 private void Button_Click(object sender, RoutedEventArgs e) {3   Frame.Navigate(typeof(Page2), &quot;This is extra data that I&#39;m sending to Page2&quot;);4 }On Page2, we can get the parameters passed when we changed pages in the OnNavigatedTo method.1 // Page22 protected override void OnNavigatedTo(NavigationEventArgs e) {3   Console.WriteLine( e.Parameter.ToString() );4 }", "date" : "January 11, 2015" },
  
    "/javascript/2015/01/05/ecmascript-6-feature-modules": {  "id": "/javascript/2015/01/05/ecmascript-6-feature-modules", "title": "EcmaScript 6 feature: modules", "category": "javascript", "tags": "es6 module export", "content" :"OverviewJavascript’s new version (EcmaScript 6) has some amazing new features. The feature discussed in this post is the modules feature.Modules allow you to load functions from other js files and use them. In NodeJS, we use modules.exports to make a function or variable available to other files. The other files can then use require('moduleName') to access them.More information can be found here.DetailsLets start out by creating a module cat that has 2 functions it exports: bite(victim) and lookCute()cat.js 1 function bite(victim){ 2   return `*cat bit ${victim}*`; 3   // notice the use of backtick and ${} for string templating 4 } 5  6 function distract(){ 7   return &#39;awww, that kitten is so cute&#39;; 8 } 9 10 // you can expose the function as is, or change the name11 export { bite, distract as lookCute }app1.js1 import { lookCute } from &#39;cat&#39;;2 console.log( lookCute() );app2.js1 import { bite, lookCute } from &#39;cat&#39;;2 console.log( lookCute() );  // &quot;awww, that kitten is so cute&quot;3 console.log( bite(&#39;Tom&#39;) ); // &quot;*cat bit Tom*&quot;Examplesexporter1.js1 export function blah(){2   return &#39;blah&#39;;3 }4 5 var aFunc = function(){6   console.log(&#39;does nothing&#39;);7 }8 export { aFunc }importer1.js1 import { blah, aFunc } from &#39;exporter1&#39;;2 aFunc();3 console.log( blah() );exporter2.js1 export default function(){2   return &quot;this is all I&#39;m exporting&quot;;3 }importer2.js1 import randomName from &#39;exporter2&#39;;2 randomName(); // when you import a default function, you choose the nameMore examples of es6 modules can be found here.", "date" : "January  5, 2015" },
  
    "/csharp/2015/01/03/c-60-feature-null-propogation": {  "id": "/csharp/2015/01/03/c-60-feature-null-propogation", "title": "6.0 feature: Null Propogation", "category": "csharp", "tags": "c# null propogation", "content" :"OverviewC# 6.0 has some interesting new features. The feature discussed in this post is null propogation.Null propogation allows you to check if a property exists and if it does, execute code.More information can be found here.DetailsUsing the ? symbol, we can see if the preceding variable holds a null. If it does, the chain stops and the value returned is null. 1 // Before 2 if (obj != null &amp;&amp; obj.children != null) { 3   obj.children.Add( new Child() ); 4 } 5  6 // In 6.0 7 if (obj?.children != null) { 8   obj.children.Add( new Child() ); 9 }10 11 // 1. Is obj == null? If yes, stop and the chain == null12 // 2. Is children == null? If yes, stop and the chain == null", "date" : "January  3, 2015" },
  
    "/javascript/2015/01/02/ecmascript-6-feature-properties": {  "id": "/javascript/2015/01/02/ecmascript-6-feature-properties", "title": "EcmaScript 6 feature: enhanced properties", "category": "javascript", "tags": "es6 property deconstruct", "content" :"OverviewJavascript’s new version (EcmaScript 6) has some amazing new features. The one discussed in this post is enhanced properties.More information can be found here.ExamplesProperty shorthands1 let name = &quot;Jim&quot;;2 let age = 21;3 let person = { name, age }; // { name: &quot;Jim&quot;, age: 21 }Deconstructing1 let person = { name: &quot;Jim&quot;, age: 21 };2 let { name, age } = person;3 console.log(name);  // Jim4 console.log(age);   // 21Computed Property Keys 1 // Before 2 var key = &quot;myKey&quot;; 3 var obj = {}; 4 obj[key] = 5; 5  6 // Now 7 let key = &quot;myKey&quot;; 8 let keyNum = 1; 9 let obj = {10   [key] = 5;        // computed property name11   [key + keyNum](){ // computed method name12     return true;13   }14 };15 console.log( obj[&quot;myKey&quot;] );    // 516 console.log( obj[&quot;myKey1&quot;]() ); // true", "date" : "January  2, 2015" },
  
    "/javascript/2015/01/02/ecmascript-6-feature-generators-and-iterators": {  "id": "/javascript/2015/01/02/ecmascript-6-feature-generators-and-iterators", "title": "EcmaScript 6 feature: generators and iterators", "category": "javascript", "tags": "es6 iterator generator loop", "content" :"OverviewJavascript’s new version (EcmaScript 6) has some amazing new features. The ones discussed in this post is iterators and generators.More information can be found here.DetailsIteratorIterators allow you to go through every element inside an abstract data type the same way without having to know how it’s been implemented. Java has the Iterable interface which forces you to implement the next() and hasNext() methods. ES6 has only 1method, next() that has 2 return values.1 // Not at the end2 return { done:false, value:&quot;returnValue&quot; };3 4 // After last element5 return { done:true, value:&quot;optionalEndValue&quot; };To iterate over an object, you need the next() method and you need your object to be iterable. To make your object iterable you do the following.1 class MyObject {2   ...3   [Symbol.iterator](){4     ...5     // this iterator has the next function mentioned above6     return aIteratorYouCreated;7   }8 }Now that you have the iterator, you want to iterate over its elements. To do this, we use es6’s new for ... of loop.1 for (let value of iterable) {2   console.log(value);3 }4 5 // for arrays, we can use entries which have both index and value6 for (let [index, value] of someArray.entries() ) {7   console.log(`${index} - ${value}`);8 }GeneratorsGenerators are functions that allow you to pause and resume. They use the yield key instead of the return key.When the generator is called the first time, it runs until it hits the first yield and then stops. When called again, it will run until the next yield. It will continue this way until it finishes. Generators in python work the same way. That’s because ES6 got them from Python. 1 function* generatorFib(){ 2   prev = 0; 3   curr = 1; 4    5   yield 0; 6   yield 1; 7  8   while (true) { 9     temp = curr;10     curr += prev;11     prev = curr;12     yield curr;13 14     if (curr == 2) {15       break;16     }17   }18 }19 20 // first 5 fib numbers21 let fibs = generatorFib();22 fibs.next(); // { done:false, value: 0}23 fibs.next(); // { done:false, value: 1}24 fibs.next(); // { done:false, value: 1}25 fibs.next(); // { done:false, value: 2}26 fibs.next(); // { done:true }We can also iterate through a generator1 for (let fib of fibs) {2   console.log(fib);3 }4 // 05 // 16 // 17 // 2", "date" : "January  2, 2015" },
  
    "/javascript/2014/12/29/ecmascript-6-feature-template-strings": {  "id": "/javascript/2014/12/29/ecmascript-6-feature-template-strings", "title": "EcmaScript 6 feature: template strings", "category": "javascript", "tags": "es6 string", "content" :"OverviewJavascript’s new version (EcmaScript 6) has some amazing new features. The one discussed in this post is template strings.Template strings are similar to string interpolation in swift and python. It uses backticks instead of double or single quotes.More information can be found here.Examples 1 var first = &quot;Jake&quot; 2   , last = &quot;Daisy&quot;; 3  4 var name1 = &quot;My name is &quot; + first + &quot; &quot; + last; 5 var name2 = `My name is ${first} ${second}`; 6 // &quot;My name is Jake Daisy&quot; 7  8 var test1 = `Hello`; 9 // &#39;&quot;Hello&quot;&#39;10 11 var test2 = 512   , test3 = 6;13 14 `test2 + test3 = ${ test2 + test3 }`15 // &quot;test2 + test3 = 11&quot;", "date" : "December 29, 2014" },
  
    "/javascript/2014/12/29/ecmascript-6-feature-class": {  "id": "/javascript/2014/12/29/ecmascript-6-feature-class", "title": "EcmaScript 6 feature: class", "category": "javascript", "tags": "es6 class oop", "content" :"OverviewJavascript’s new version (EcmaScript 6) has some amazing new features. The one discussed in this post is the new class syntax.More information can be found here.Details 1 // OLD CLASS 2 var MyObject = function(params){ 3   this.p1 = params.p1; 4   this.p2 = params.p2; 5 }; 6 // I will go over the new string interpolation in another post 7 MyObject.prototype.summary = function(){ 8   return &quot;p1:&quot; + this.p1 + &quot; p2:&quot; + this.p2; 9 };10 11 12 // NEW CLASS13 class MyObject {14   constructor(p1, p2){15     this.p1 = p1;16     this.p2 = p2;17   }18   summary() {19     return &quot;p1:&quot; + this.p1 + &quot; p2:&quot; + this.p2;20   }21 }Examples 1 // Getters and Setters 2 class Person { 3   constructor(name){ 4     this._name = name; 5   } 6   get name(){ 7     return this._name; 8   } 9   set name(newName){10     if (newName) {11       this._name = newName;12     }13   }14 }15 16 let guy = new Person(&quot;Tom&quot;);17 console.log(guy.name);  // GET - Tom18 guy.name = &quot;Steve&quot;;     // SET19 console.log(guy.name);  // GET - Steve20 21 22 // Inheritance23 class Dev extends Person {24   static allDevs = []25   constructor(name, preferredLang) {26     super(name);27     this.lang = preferredLang;28     Dev.allDevs.push(name);29   }30   static numDevs() {31     return Dev.allDevs.length;32   }33 }", "date" : "December 29, 2014" },
  
    "/javascript/2014/12/29/ecmascript-6-feature-arrow": {  "id": "/javascript/2014/12/29/ecmascript-6-feature-arrow", "title": "EcmaScript 6 feature: arrow", "category": "javascript", "tags": "es6 function", "content" :"OverviewJavascript’s new version (EcmaScript 6) has some amazing new features. The one discussed in this post is the arrow symbol =&gt;.The arrow symbol is used to create shorter functions and to fix the scoped this. More information can be found here.DetailsThe arrow symbol can help shorten functions. 1 var dogs = [ 2   &quot;Jake&quot;, 3   &quot;Daisy&quot;, 4   &quot;Honey&quot; 5 ]; 6  7 var length1 = dogs.map(function(s){ return s.length }); 8 // [4, 5, 5] 9 10 var length2 = dogs.map( s =&gt; s.length );11 // [4, 5, 5]It can also help with the scoped this variable. 1 // Before 1 2 function Dog1(){ 3   var that = this; // We have to cache &#39;this&#39; 4   that.treats = 0; 5   setInterval(function eatTreat(){ 6     that.treats++; 7   }, 1000); 8 } 9 10 // Before 211 function Dog2(){12   this.treats = 0;13   setInterval(function eatTreat(){14     this.treats++;15   }.bind(this), 1000); // We have to bind &#39;this&#39; to the function16 }17 18 // Now19 function Dog3(){20   this.treats = 0;21   setInterval(() =&gt; { // &#39;this&#39; refers to Dog3&#39;s &#39;this&#39;22     this.treats++;23   }, 1000);24 }Examples 1 var biggestNum = (a, b) =&gt; (a &gt; b)? a : b; 2 biggestNum(4, 5);   // 5 3 biggestNum(10, 2);  // 10 4  5  6 var myList = [&quot;Nami&quot;, &quot;Luffy&quot;, &quot;Zoro&quot;]; 7 var findIdx = (lst, val) =&gt; { 8   for(var i=0; i &lt; lst.length; ++i){ 9     if (lst[i] == val) return i;10   }11   return -1;12 }13 findIdx(myList, &quot;Luffy&quot;); // 114 findIdx(myList, &quot;Robin&quot;); // -1", "date" : "December 29, 2014" },
  
    "/other/2014/12/24/my-first-post": {  "id": "/other/2014/12/24/my-first-post", "title": "My first post", "category": "other", "tags": "", "content" :"It took me a while to get this blog up because I was trying to understand how Jekyll works.The site built fine locally but it didn’t seem to want to build on github. The reason was that I was trying to make a blog folder and put all the Jekyll files in there.Long story short, put your jekyll files in the root of the repo so that github doesn’t spam you with build fail emails.", "date" : "December 24, 2014" },
  
    "/swift/2014/12/24/ios-uitableview-and-uisearchbar": {  "id": "/swift/2014/12/24/ios-uitableview-and-uisearchbar", "title": "UITableView and UISearchBar", "category": "swift", "tags": "ios ui", "content" :"OverviewWhile working on an iOS app, I needed to have a TableView that was searchable. After looking it up, I found out thatI could use a Table View and add a Search Bar and Search Display.ControlsTableView will display the data, we just have to supply the functions that tell the table view what to show.The Search Bar doesn’t do anything except alert us when the search query was changed… We have to implementthe search functionality ourselves. The search display is the dropdown that appears with suggestions once you type somethingin the search bar.DirectionsFirst we drag and drop a UIViewController to our storyboard.Then we drag and drop a Table View inside that ViewController and a Search Bar and Search Display above the TableView.Note: Search Bar and Search Display is 1 control.Now we need the implementation. Create a file that is a subclass of UIViewController and add the following protocols.1 class YourViewController: UIViewController, UITableViewDataSource, UITableViewDelegate, UISearchBarDelegate, UISearchDisplayDelegateWe have to implement the following functions now. 1 // How many rows to display 2 func tableView(tableView: UITableView, numberOfRowsInSection section: Int) -&gt; Int 3  4 // What to display for a particular row 5 func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -&gt; UITableViewCell 6  7 // How many sections (only 1 in our case) 8 func numberOfSectionsInTableView(tableView: UITableView) -&gt; Int { 9 10 // the searchString has changed, we have to update our array11 func searchDisplayController(controller: UISearchDisplayController, shouldReloadTableForSearchString searchString: String!) -&gt; Bool 12 13 // the searchString has changed, we have to update our array14 func searchDisplayController(controller: UISearchDisplayController!, shouldReloadTableForSearchScope searchOption: Int) -&gt; BoolTableView functions 1 func tableView(tableView: UITableView, numberOfRowsInSection section: Int) -&gt; Int { 2   if (tableView == self.searchDisplayController?.searchResultsTableView) { 3       return searchResults.count 4   } else { 5       return data.count 6   } 7 } 8  9 func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -&gt; UITableViewCell {10   let cell = myTableView.dequeueReusableCellWithIdentifier(&quot;cell&quot;) as UITableViewCell11         12   if (tableView == self.searchDisplayController?.searchResultsTableView) {13       cell.textLabel?.text = searchResults[indexPath.row]14   } else {15       cell.textLabel?.text = data[indexPath.row]16   }17   return cell18 }19 20 func numberOfSectionsInTableView(tableView: UITableView) -&gt; Int {21   return 122 }There are 2 important things to note.       On line 2 and 12, we’re checking if the tableView that is callingthis function is the searchDisplay tableView or not. We need to check to be able to return the right data.        On line 10, we’re using myTableView. The searchDisplay TableView doesn’t actually have a prototype cell so we’re usingthe one from our main tableView.  SearchBar functions 1 func searchDisplayController(controller: UISearchDisplayController, shouldReloadTableForSearchString searchString: String!) -&gt; Bool { 2   filterContentForSearchText(searchString) 3   return true 4 } 5  6 func searchDisplayController(controller: UISearchDisplayController!, shouldReloadTableForSearchScope searchOption: Int) -&gt; Bool { 7   filterContentForSearchText(self.searchDisplayController!.searchBar.text) 8   return true 9 }10 11 func filterContentForSearchText(searchText:String) {12     let temp = data.reduce([], combine: +) // to flatten array13     searchResults = temp.filter {14         var ret = false15         if $0.lowercaseString.rangeOfString(searchText) != nil {16             ret = true17         }18         return ret19     }20 }", "date" : "December 24, 2014" },
  
};

// init lunr
var idx = lunr(function () {
  this.field('title', 10);
  this.field('category', 8);
  this.field('tags', 5);
  this.field('date', 4);
  this.field('content');
});

// add each document to be index
for(var index in data) {
  idx.add(data[index]);
  random_posts.push(index);
  delete data[index].content;
  delete data[index].date;
}

var shuffle = function(v){
    for(var j, x, i = v.length; i; j = parseInt(Math.random() * i), x = v[--i], v[i] = v[j], v[j] = x);
    return v;
}

random_posts = shuffle(random_posts).splice(0,5);
random_posts = random_posts.map(function(key){
  return {
      id: data[key].id,
      title: data[key].title,
      category: data[key].category
  };
});

$(function() {
  React.render(<SearchBar lunr={idx} posts={data} />, document.getElementById('searchbar'));
  React.render(<RandomPostList posts={random_posts} />, document.getElementById('random_posts'));
});